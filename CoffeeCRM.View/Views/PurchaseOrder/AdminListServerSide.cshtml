
    @{
        Layout = "_Admin_Layout";
    }

    @{
    ViewData["ViewName"] = "Nhập hàng";
}

    <style>
    :root {
        --primary-color: #4361ee;
        --primary-hover: #3a56d4;
        --secondary-color: #6c757d;
        --success-color: #2ecc71;
        --info-color: #3498db;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --light-color: #f8f9fa;
        --dark-color: #343a40;
        --body-bg: #f5f7fb;
        --card-bg: #ffffff;
        --border-color: #e9ecef;
        --text-color: #495057;
        --text-muted: #6c757d;
        --sidebar-width: 280px;
        --bs-secondary-rgb: 108, 117, 125;
    }

    .dropdown-menu {
        border: none;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        border-radius: 0.5rem;
    }

    .dropdown-item {
        padding: 0.6rem 1.5rem;
        font-weight: 500;
    }

        .dropdown-item:hover {
            background-color: rgba(67, 97, 238, 0.1);
        }

    /* Card styling */
    .card {
        border: none;
        border-radius: 0.75rem;
        box-shadow: 0 0.125rem 0.375rem rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);
            transform: translateY(-2px);
        }

    .card-header {
        background-color: var(--card-bg);
        border-bottom: 1px solid var(--border-color);
        padding: 1.25rem 1.5rem;
        font-weight: 600;
        color: #2d3748;
        border-top-left-radius: 0.75rem !important;
        border-top-right-radius: 0.75rem !important;
    }

    .card-body {
        padding: 1.5rem;
    }

    /* Button styling */
    .btn {
        font-weight: 500;
        padding: 0.5rem 1.25rem;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
        }

    .btn-success {
        background-color: var(--success-color);
        border-color: var(--success-color);
    }

    .btn-info {
        background-color: var(--info-color);
        border-color: var(--info-color);
    }

    .btn-warning {
        background-color: var(--warning-color);
        border-color: var(--warning-color);
    }

    .btn-danger {
        background-color: var(--danger-color);
        border-color: var(--danger-color);
    }

    .btn-sm {
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
    }

    .btn i {
        margin-right: 0.375rem;
    }

    /* Form controls */
    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #2d3748;
    }

    .form-control, .form-select {
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
        background-color: #fff;
        transition: all 0.2s ease;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
        }

    /* Select2 customization */
    .select2-container--bootstrap-5 .select2-selection {
        min-height: 42px;
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
    }

    .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
        padding: 0.5rem 1rem;
        line-height: 1.5;
    }

    .select2-container--bootstrap-5 .select2-dropdown {
        border-radius: 0.5rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        border: none;
    }

    /* Table styling */
    .table {
        border-collapse: separate;
        border-spacing: 0;
    }

        .table th {
            font-weight: 600;
            color: #2d3748;
            background-color: rgba(0, 0, 0, 0.02);
            border-bottom: 2px solid var(--border-color);
            padding: 1rem;
        }

        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--border-color);
        }

        .table tbody tr:hover {
            background-color: rgba(67, 97, 238, 0.03);
        }

    /* DataTables customization */
    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter {
        margin-bottom: 1.5rem;
    }

    .dataTables_wrapper .dataTables_info,
    .dataTables_wrapper .dataTables_paginate {
        margin-top: 1.5rem;
    }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            border-radius: 0.375rem;
            margin: 0 0.25rem;
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button.current {
                background: var(--primary-color);
                border-color: var(--primary-color);
                color: white !important;
            }

    /* Status badges */
    .badge {
        color: #fff;
        padding: 0.5em 0.8em;
        font-weight: 500;
        border-radius: 0.375rem;
    }

    .bg-secondary {
        --bs-bg-opacity: 1;
        background-color: rgba(var(--bs-secondary-rgb), var(--bs-bg-opacity)) !important;
    }

    /* Modal customization */
    .modal-content {
        border: none;
        border-radius: 0.75rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background-color: var(--card-bg);
        border-bottom: 1px solid var(--border-color);
        padding: 1.25rem 1.5rem;
        border-top-left-radius: 0.75rem;
        border-top-right-radius: 0.75rem;
    }

    .modal-title {
        font-weight: 600;
        color: #2d3748;
    }

    .modal-footer {
        background-color: var(--card-bg);
        border-top: 1px solid var(--border-color);
        padding: 1.25rem 1.5rem;
        border-bottom-left-radius: 0.75rem;
        border-bottom-right-radius: 0.75rem;
    }

    /* Item form */
    #itemForm {
        transition: all 0.3s ease;
        border-radius: 0.75rem;
    }

    /* View modal styles */
    #viewPoStatus .badge {
        font-size: 1rem;
        padding: 0.5rem 1rem;
    }

    .border.rounded.p-2.bg-light {
        min-height: 42px;
        border-radius: 0.5rem !important;
        background-color: #f8f9fa !important;
        border-color: var(--border-color) !important;
    }

    /* History table */
    #poHistoryTable {
        font-size: 0.9rem;
    }

    /* Footer styling */
    footer {
        margin-top: 3rem;
        padding: 1.5rem 0;
        background-color: #fff;
        border-top: 1px solid var(--border-color);
        color: var(--text-muted);
    }

    /* Process flow section */
    .process-flow {
        background-color: #fff;
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 0.125rem 0.375rem rgba(0, 0, 0, 0.05);
    }

    .process-step {
        text-align: center;
        position: relative;
        padding: 1rem 0;
    }

        .process-step:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 50%;
            right: -50%;
            width: 100%;
            height: 2px;
            background-color: var(--border-color);
            z-index: 1;
        }

    .step-icon {
        width: 60px;
        height: 60px;
        background-color: var(--primary-color);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1rem;
        position: relative;
        z-index: 2;
        font-size: 1.5rem;
    }

    .step-title {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #2d3748;
    }

    .step-desc {
        color: var(--text-muted);
        font-size: 0.875rem;
    }

    /* Warehouse integration section */
    .integration-card {
        border-left: 4px solid var(--primary-color);
        background-color: rgba(67, 97, 238, 0.05);
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

        .integration-card h5 {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .integration-card p {
            margin-bottom: 0.5rem;
        }

        .integration-card ul {
            padding-left: 1.5rem;
        }

            .integration-card ul li {
                margin-bottom: 0.5rem;
            }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .process-step:not(:last-child)::after

    {
        display: none;
    }

    .process-step {
        margin-bottom: 2rem;
    }

    }
    </style>
    <div id="kt_app_content" class="app-content  flex-column-fluid ">
        <!--begin::Content container-->
        <div id="kt_app_content_container" class="app-container  container-fluid ">
            <!--begin::Row-->
        <div class="container-fluid">
            <div class="page-header d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0"></h1>
                    <p class="mb-0 text-muted"></p>
                </div>
                <div>
                    <button type="button" class="btn btn-primary" id="btnCreatePurchaseOrder">
                        <i class="fas fa-plus"></i> Tạo đơn nhập hàng
                    </button>
                </div>
            </div>

            <!-- Process Flow Section -->
            <div class="process-flow mb-4">
                <h5 class="mb-4">Quy trình Nhập hàng và Lưu kho</h5>
                <div class="row">
                    <div class="col-md-3 process-step">
                        <div class="step-icon">
                            <i class="fas fa-file-invoice"></i>
                        </div>
                        <div class="step-title">Tạo đơn hàng</div>
                        <div class="step-desc">Tạo đơn đặt hàng từ nhà cung cấp</div>
                    </div>
                    <div class="col-md-3 process-step">
                        <div class="step-icon">
                            <i class="fas fa-truck-loading"></i>
                        </div>
                        <div class="step-title">Nhận hàng</div>
                        <div class="step-desc">Kiểm tra và xác nhận hàng đã nhận</div>
                    </div>
                    <div class="col-md-3 process-step">
                        <div class="step-icon">
                            <i class="fas fa-clipboard-check"></i>
                        </div>
                        <div class="step-title">Tạo phiếu nhập kho</div>
                        <div class="step-desc">Chuyển đơn hàng thành phiếu nhập kho</div>
                    </div>
                    <div class="col-md-3 process-step">
                        <div class="step-icon">
                            <i class="fas fa-warehouse"></i>
                        </div>
                        <div class="step-title">Cập nhật kho</div>
                        <div class="step-desc">Cập nhật số lượng tồn kho</div>
                    </div>
                </div>
            </div>

            <!-- Warehouse Integration Section -->
            <div class="integration-card mb-4">
                <h5><i class="fas fa-link me-2"></i>Liên kết Đơn nhập hàng với Quản lý kho</h5>
                <p>Khi đơn hàng được chuyển sang trạng thái <strong>"Đã nhận hàng"</strong>, hệ thống sẽ tự động:</p>
                <ul>
                    <li>Tạo phiếu nhập kho tương ứng với các nguyên liệu trong đơn hàng</li>
                    <li>Cập nhật số lượng tồn kho của các nguyên liệu</li>
                    <li>Ghi nhận lịch sử giao dịch nhập kho</li>
                </ul>
                <p class="mb-0">Bạn có thể xem chi tiết phiếu nhập kho được tạo trong phần <strong>Quản lý Kho > Lịch sử Giao dịch</strong></p>
            </div>

            <!-- Filter Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <span class="mt-6">
                        <i class="fas fa-filter me-2"></i>Bộ lọc
                    </span>
                </div>
                <div class="card-body">
                    <form id="filterForm">
                        <div class="row">
                            <div class="col-md-3 mb-3">
                                <label for="filterCode" class="form-label">Mã đơn hàng</label>
                                <input type="text" class="form-control" id="filterCode" placeholder="Nhập mã đơn hàng">
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="filterSupplier" class="form-label">Nhà cung cấp</label>
                                <select class="form-select" id="filterSupplier">
                                    <option value="">Tất cả nhà cung cấp</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="filterStatus" class="form-label">Trạng thái</label>
                                <select class="form-select" id="filterStatus">
                                    <option value="">Tất cả trạng thái</option>
                                    <option value="draft">Nháp</option>
                                    <option value="pending">Đã gửi</option>
                                    <option value="approved">Đã xác nhận</option>
                                    <option value="completed">Đã nhận hàng</option>
                                    <option value="cancelled">Đã hủy</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="filterDateRange" class="form-label">Thời gian đặt hàng</label>
                                <input type="text" class="form-control" id="filterDateRange" placeholder="Chọn khoảng thời gian">
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-outline-secondary me-2" id="btnResetFilter">
                                <i class="fas fa-redo"></i> Đặt lại
                            </button>
                            <button type="button" class="btn btn-primary" id="btnApplyFilter">
                                <i class="fas fa-search"></i> Tìm kiếm
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Data Table Card -->
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="purchaseOrderTable">
                            <thead>
                                <tr>
                                    <th>Mã đơn hàng</th>
                                    <th>Nhà cung cấp</th>
                                    <th>Ngày đặt</th>
                                    <th>Ngày dự kiến</th>
                                    <th>Tổng tiền</th>
                                    <th>Trạng thái</th>
                                    <th>Người tạo</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Data will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        </div>
        <!--end::Content container-->
    </div>

<!-- Create/Edit Purchase Order Modal -->
<div class="modal fade" id="purchaseOrderModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="purchaseOrderModalTitle">
                    <i class="fas fa-file-invoice me-2"></i>Tạo đơn nhập hàng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="purchaseOrderForm">
                    <input type="hidden" id="purchaseOrderId" value="0">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="poCode" class="form-label">Mã đơn hàng</label>
                            <input type="text" class="form-control" id="poCode" placeholder="Tự động tạo nếu để trống" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="poSupplier" class="form-label">Nhà cung cấp <span class="text-danger">*</span></label>
                            <select class="form-select select2" id="poSupplier" required>
                                
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="poOrderDate" class="form-label">Ngày đặt hàng</label>
                            <input type="text" readonly class="form-control datepicker" id="poOrderDate" placeholder="Chọn ngày đặt hàng">
                        </div>
                        <div class="col-md-6">
                            <label for="poExpectedDate" class="form-label">Ngày dự kiến nhận</label>
                            <input type="text" class="form-control datepicker" id="poExpectedDate" placeholder="Chọn ngày dự kiến nhận">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="poNote" class="form-label">Ghi chú</label>
                            <textarea class="form-control" id="poNote" rows="2" placeholder="Nhập ghi chú cho đơn hàng"></textarea>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <label class="form-label mb-0 fw-bold">Chi tiết đơn hàng</label>
                            <button type="button" class="btn btn-success" id="btnAddItem">
                                <i class="fas fa-plus"></i> Thêm nguyên liệu
                            </button>
                        </div>

                        <div id="itemForm" class="card mb-3 d-none">
                            <div class="card-body bg-light">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="poIngredient" class="form-label">Nguyên liệu <span class="text-danger">*</span></label>
                                        <select class="form-select select2" id="poIngredient">
                                            <option value="">-- Chọn nguyên liệu --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="poQuantity" class="form-label">Số lượng <span class="text-danger">*</span></label>
                                        <input type="number" class="form-control" id="poQuantity" min="1" value="1">
                                    </div>
                                </div>

                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="poUnitPrice" class="form-label">Đơn giá (VNĐ) <span class="text-danger">*</span></label>
                                        <input type="number" class="form-control" id="poUnitPrice" min="0" value="0">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="poItemNote" class="form-label">Ghi chú</label>
                                        <input type="text" class="form-control" id="poItemNote" placeholder="Ghi chú cho nguyên liệu này">
                                    </div>
                                </div>

                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-success me-2" id="btnConfirmItem">Thêm</button>
                                    <button type="button" class="btn btn-secondary" id="btnCancelItem">Hủy</button>
                                </div>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table" id="poItemsTable">
                                <thead>
                                    <tr>
                                        <th>STT</th>
                                        <th>Nguyên liệu</th>
                                        <th>Đơn vị</th>
                                        <th class="text-end">Số lượng</th>
                                        <th class="text-end">Đơn giá</th>
                                        <th class="text-end">Thành tiền</th>
                                        <th>Ghi chú</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr id="noItemsRow">
                                        <td colspan="8" class="text-center py-3 text-muted">Chưa có nguyên liệu nào được thêm</td>
                                    </tr>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="5" class="text-end fw-bold">Tổng cộng:</td>
                                        <td class="text-end fw-bold" id="poTotalAmount">0 ₫</td>
                                        <td colspan="2"></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success me-2" id="btnSaveAsDraft">
                    <i class="fas fa-save"></i> Lưu nháp
                </button>
                <button type="button" class="btn btn-primary" id="btnSaveAndSend">
                    <i class="fas fa-paper-plane"></i> Lưu và gửi
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Purchase Order Modal -->
<div class="modal fade" id="viewPurchaseOrderModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-file-invoice me-2"></i>Chi tiết đơn nhập hàng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Mã đơn hàng:</label>
                            <div id="viewPoCode" class="border rounded p-2 bg-light"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Nhà cung cấp:</label>
                            <div id="viewPoSupplier" class="border rounded p-2 bg-light"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Người tạo:</label>
                            <div id="viewPoCreatedBy" class="border rounded p-2 bg-light"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Ngày đặt hàng:</label>
                            <div id="viewPoOrderDate" class="border rounded p-2 bg-light"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Ngày dự kiến nhận:</label>
                            <div id="viewPoExpectedDate" class="border rounded p-2 bg-light"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Trạng thái:</label>
                            <div id="viewPoStatus" class="border rounded p-2"></div>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Ghi chú:</label>
                    <div id="viewPoNote" class="border rounded p-2 bg-light"></div>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Chi tiết đơn hàng:</label>
                    <div class="table-responsive">
                        <table class="table" id="viewPoItemsTable">
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>Nguyên liệu</th>
                                    <th>Đơn vị</th>
                                    <th class="text-end">Số lượng</th>
                                    <th class="text-end">Đơn giá</th>
                                    <th class="text-end">Thành tiền</th>
                                    <th>Ghi chú</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Items will be loaded here -->
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="5" class="text-end fw-bold">Tổng cộng:</td>
                                    <td class="text-end fw-bold" id="viewPoTotalAmount">0 ₫</td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>

                <div id="poHistorySection" class="mb-3">
                    <label class="form-label fw-bold">Lịch sử đơn hàng:</label>
                    <div class="table-responsive">
                        <table class="table" id="poHistoryTable">
                            <thead>
                                <tr>
                                    <th>Thời gian</th>
                                    <th>Người thực hiện</th>
                                    <th>Hành động</th>
                                    <th>Ghi chú</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- History will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Warehouse Integration Section -->
                <div id="warehouseIntegrationSection" class="d-none">
                    <label class="form-label fw-bold">Thông tin nhập kho:</label>
                    <div class="alert alert-success">
                        <div class="d-flex">
                            <div class="me-3">
                                <i class="fas fa-warehouse fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">Đã nhập kho thành công</h5>
                                <p class="mb-1">Phiếu nhập kho: <strong id="warehouseReceiptCode">WR-000123</strong></p>
                                <p class="mb-1">Thời gian nhập kho: <span id="warehouseReceiptDate">25/04/2023 15:30</span></p>
                                <p class="mb-0">Người thực hiện: <span id="warehouseReceiptUser">Admin</span></p>
                                <hr>
                                <p class="mb-0">
                                    <a href="#" class="alert-link d-none">
                                        <i class="fas fa-external-link-alt me-1"></i>Xem chi tiết phiếu nhập kho
                                    </a>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" id="viewPoFooter">
                <!-- Action buttons will be added dynamically based on status -->
            </div>
        </div>
    </div>
</div>
    <!--begin:Base load data-->
<script>
    let currentSupplierId = null;
    let isResettingForm = false;
    let currentPurchase;

    $(document).ready(function() {
        // Initialize DataTable
        var purchaseOrderTable = $('#purchaseOrderTable').DataTable({
            processing: true,
            serverSide: true,
            paging: true,
                    searching: { regex: true },
                    order: [2, 0],
                    "oLanguage": {
                        "sUrl": "/js/Vietnamese.json"
                    },
            ajax: {
                        url: systemURL + "purchaseOrder/api/list-server-side",
                        type: "POST",
                        contentType: "application/json",

                        dataType: "json",
                        // beforeSend: function(xhr) {
                        // 	xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        // },
                        data: function (d) {
                            d.searchAll = "";
                            return JSON.stringify(d);
                        }
                    },
            columns: [
                { data: 'purchaseOrderCode' },
                { data: 'supplierName' },
                {
                    data: 'createdTime',
                    render: function(data) {
                        return moment(data).format('DD/MM/YYYY HH:mm');
                    }
                },
                {
                    data: 'orderDate',
                    render: function(data) {
                        return data ? moment(data).format('DD/MM/YYYY') : 'N/A';
                    }
                },
                {
                    data: 'totalPrice',
                    render: function(data) {
                        return formatCurrency(data);
                    },
                    className: 'text-end'
                },
                {
                    data: 'paymentStatus',
                    render: function(data) {
                        return renderStatus(data);
                    }
                },
                { data: 'accountName' },
                {
                    data: 'id',
                    render: function(data, type, row) {
                        return renderActions(data, row.paymentStatus);
                    },
                    orderable: false,
                    className: 'text-center'
                }
            ],
            language: {
                "sUrl": "/js/Vietnamese.json"
            }
        });

        // Initialize Flatpickr for date inputs
        $('.datepicker').flatpickr({
            dateFormat: 'd/m/Y',
        });

        // Initialize DateRangePicker
        $('#filterDateRange').flatpickr({
            mode: 'range',
            dateFormat: 'd/m/Y',
        });

        // Load suppliers for filter and form
        loadSuppliers();

        // Load ingredients for form
        $(document).on('change', '#poSupplier', function () {
            const selectedSupplierId = $(this).val();
            if (selectedSupplierId) {
                loadIngredients(selectedSupplierId);
            } else {
                $('#poIngredient').html('<option value="">-- Chọn nguyên liệu --</option>').trigger('change');
            }
        });


        // Apply filter
        $('#btnApplyFilter').click(function() {
            purchaseOrderTable.ajax.reload();
        });

        // Reset filter
        $('#btnResetFilter').click(function() {
            $('#filterForm')[0].reset();
            $('#filterSupplier').val('').trigger('change');
            purchaseOrderTable.ajax.reload();
        });

        // Create Purchase Order
        $('#btnCreatePurchaseOrder').click(function() {
            resetPurchaseOrderForm();
            $('#purchaseOrderModalTitle').html('<i class="fas fa-file-invoice me-2"></i>Tạo đơn nhập hàng');
            $('#purchaseOrderModal').modal('show');
        });

        // Add Item Button
        $('#btnAddItem').click(function() {
            $('#itemForm').removeClass('d-none');
        });

        // Cancel Item Button
        $('#btnCancelItem').click(function() {
            $('#itemForm').addClass('d-none');
        });

    function resetPurchaseOrderForm() {
            isResettingForm = true;
            $('#purchaseOrderForm')[0].reset();
            $('#purchaseOrderId').val(0);
            $('#poSupplier').val('').prop('disabled', false);
            $('#poSupplier').val('').trigger('change');
            $('#poItemsTable tbody').html('<tr id="noItemsRow"><td colspan="8" class="text-center py-3 text-muted">Chưa có nguyên liệu nào được thêm</td></tr>');
            $('#poTotalAmount').text('0 ₫');

            // Set default dates
            const today = moment().format('DD/MM/YYYY');
            $('#poOrderDate').val(today);
            $('#poExpectedDate').val(moment().add(7, 'days').format('DD/MM/YYYY'));
            currentSupplierId = null;

            setTimeout(() => isResettingForm = false, 0);
        }

    $('#poSupplier').on('change', function () {
        if (isResettingForm) return;
        const selectedSupplierId = $(this).val();
        const itemCount = $('#poItemsTable tbody tr').not('#noItemsRow').length;

        if (itemCount > 0 && selectedSupplierId !== currentSupplierId) {
            Swal.fire({
                icon: 'warning',
                title: 'Không thể thay đổi nhà cung cấp',
                text: 'Vui lòng xóa tất cả nguyên liệu trước khi chọn nhà cung cấp khác.'
            });

            // Reset lại dropdown về nhà cung cấp trước đó
            $(this).val(currentSupplierId).trigger('change');
        }
    });

        // Confirm Item Button
        $('#btnConfirmItem').click(function() {
            const ingredientId = $('#poIngredient').val();
            const ingredientText = $('#poIngredient option:selected').text();
            const quantity = parseFloat($('#poQuantity').val());
            const unitPrice = parseFloat($('#poUnitPrice').val());
            const note = $('#poItemNote').val();

            if (!ingredientId || isNaN(quantity) || quantity <= 0 || isNaN(unitPrice) || unitPrice < 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng điền đầy đủ thông tin nguyên liệu!'
                });
                return;
            }

            const isDuplicate = $('#poItemsTable tbody tr').not('#noItemsRow').toArray().some(row => {
                return $(row).data('ingredient-id') == ingredientId;
            });

            if (isDuplicate) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Nguyên liệu đã tồn tại',
                    text: 'Nguyên liệu này đã được thêm vào danh sách.'
                });
                return;
            }

            const supplierId = $('#poSupplier').val();
            if (!currentSupplierId) {
                currentSupplierId = supplierId;          
                $('#poSupplier').val('').prop('disabled', true);
                $('#poSupplier').val(currentSupplierId).trigger('change');
            }

            // Extract ingredient name and unit
            const ingredientParts = ingredientText.split(' (');
            const ingredientName = ingredientParts[0];
            const unit = ingredientParts[1].replace(')', '');

            // Calculate total
            const total = quantity * unitPrice;

            // Add item to table
            addItemToTable(ingredientId, ingredientName, unit, quantity, unitPrice, total, note);

            // Reset form
            $('#poIngredient').val('').trigger('change');
            $('#poQuantity').val(1);
            $('#poUnitPrice').val(0);
            $('#poItemNote').val('');

            // Hide form
            $('#itemForm').addClass('d-none');
        });

        // Remove item
        $(document).on('click', '.btn-remove-item', function() {
            $(this).closest('tr').remove();

            // Update row numbers
            updateRowNumbers();

            // Update total amount
            updateTotalAmount();

            // If no items left, show empty message
            if ($('#poItemsTable tbody tr').length === 0) {
                $('#poItemsTable tbody').html('<tr id="noItemsRow"><td colspan="8" class="text-center py-3 text-muted">Chưa có nguyên liệu nào được thêm</td></tr>');
                currentSupplierId = null;
                $('#poSupplier').val('').prop('disabled', false);
            }
        });

        // Save as Draft
        $('#btnSaveAsDraft').click(function() {
            savePurchaseOrder('draft');
        });

        // Save and Send
        $('#btnSaveAndSend').click(function() {
            savePurchaseOrder('pending');
        });

        // View Purchase Order
        $(document).on('click', '.btn-view', function() {
            const id = $(this).data('id');
            viewPurchaseOrder(id);
        });

        // Edit Purchase Order
        $(document).on('click', '.btn-edit', function() {
            const id = $(this).data('id');
            editPurchaseOrder(id);
        });

        // Delete Purchase Order
        $(document).on('click', '.btn-delete', function() {
            const id = $(this).data('id');
            deletePurchaseOrder(id);
        });

        // Change Status Actions
        $(document).on('click', '.btn-status-action', function() {
            const id = $(this).data('id');
            const status = $(this).data('status');
            changePurchaseOrderStatus(id, status);
        });

        // Print Purchase Order
        $(document).on('click', '.btn-print', function() {
            const id = $(this).data('id');
            printPurchaseOrder(id);
        });

        // Helper Functions
        function loadSuppliers() {
            setTimeout(function () {
                $.ajax({
                    url: systemURL + 'supplier/api/list',
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        const suppliers = response.data || [];

                        let filterOptions = '<option value="">Tất cả nhà cung cấp</option>';
                        let formOptions = '<option value="">-- Chọn nhà cung cấp --</option>';

                        suppliers.forEach(function (supplier) {
                            const option = `<option value="${supplier.id}">${supplier.supplierName}</option>`;
                            filterOptions += option;
                            formOptions += option;
                        });

                        $('#filterSupplier').html(filterOptions).trigger('change');
                        $('#poSupplier').html(formOptions).trigger('change');
                    },
                    error: function (xhr, status, error) {
                        console.error('Không thể tải danh sách nhà cung cấp:', error);
                    }
                });
            }, 300);
        }
        
        function loadIngredients(id) {
            setTimeout(function () {
                $.ajax({
                    url: systemURL + `ingredient/api/listbysupplier/?supplierId=${id}`,
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        const ingredients = response.data || [];

                        let options = '<option value="">-- Chọn nguyên liệu --</option>';

                        ingredients.forEach(function(ingredient) {
                            options += `<option value="${ingredient.id}">${ingredient.ingredientName} - ${formatCurrency(ingredient.averagePrice)} (${ingredient.unitName})</option>`;
                        });

                        $('#poIngredient').html(options).trigger('change');
                    },
                    error: function (xhr, status, error) {
                        console.error('Không thể tải danh sách nhà cung cấp:', error);
                    }
                });
            }, 300);
        }

        function addItemToTable(ingredientId, ingredientName, unit, quantity, unitPrice, total, note) {
            // Remove empty row if exists
            $('#noItemsRow').remove();

            // Create new row
            const rowCount = $('#poItemsTable tbody tr').length;
            const newRow = `
                <tr data-ingredient-id="${ingredientId}" data-item-id="0">
                    <td>${rowCount + 1}</td>
                    <td>${ingredientName}</td>
                    <td>${unit}</td>
                    <td class="text-end">${quantity}</td>
                    <td class="text-end">${formatCurrency(unitPrice)}</td>
                    <td class="text-end">${formatCurrency(total)}</td>
                    <td>${note || ''}</td>
                    <td class="text-center">
                        <button type="button" class="btn btn-sm btn-danger btn-remove-item">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            `;

            $('#poItemsTable tbody').append(newRow);

            // Update total amount
            updateTotalAmount();
        }

        function updateRowNumbers() {
            $('#poItemsTable tbody tr').each(function(index) {
                $(this).find('td:first').text(index + 1);
            });
        }

        function updateTotalAmount() {
            let total = 0;

            $('#poItemsTable tbody tr').each(function() {
                if (!$(this).attr('id') || $(this).attr('id') !== 'noItemsRow') {
                    const rowTotal = parseFloat($(this).find('td:eq(5)').text().replace(/[^\d]/g, '')) || 0;
                    total += rowTotal;
                }
            });

            $('#poTotalAmount').text(formatCurrency(total));
        }

        function savePurchaseOrder(status) {
            const id = $('#purchaseOrderId').val();
            const supplierId = $('#poSupplier').val();
            const orderDate = $('#poOrderDate').val();
            const expectedDate = $('#poExpectedDate').val();
            const note = $('#poNote').val();
            const totalPrice = $('#poTotalAmount').text().replace(/[^\d]/g, '');
            let userData = localStorage.getItem('profile');
            let user = JSON.parse(userData);

            if (!supplierId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng chọn nhà cung cấp!'
                });
                return;
            }

            if ($('#poItemsTable tbody tr').length === 0 || $('#noItemsRow').length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Vui lòng thêm ít nhất một nguyên liệu!'
                });
                return;
            }

            // Collect items
            const items = [];
            $('#poItemsTable tbody tr').each(function() {
                if (!$(this).attr('id') || $(this).attr('id') !== 'noItemsRow') {
                    const itemId = $(this).data('item-id');
                    const ingredientId = $(this).data('ingredient-id');
                    const quantity = parseInt($(this).find('td:eq(3)').text());
                    const unitPrice = parseFloat($(this).find('td:eq(4)').text().replace(/[^\d]/g, ''));
                    const newDate = formatDatetimeUpdate(moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY HH:mm:ss'));

                    items.push({
                        id: itemId ? itemId : 0,
                        ingredientId: ingredientId,
                        quantity: quantity,
                        unitPrice: unitPrice,
                        createdTime: newDate,
                        active: true
                    });
                }
            });

            // Prepare data
            const data = {
                id: parseInt(id),
                totalPrice: totalPrice,
                supplierId: parseInt(supplierId),
                createdTime: formatDatetimeUpdate(moment(orderDate, 'DD/MM/YYYY').format('DD/MM/YYYY HH:mm:ss')),
                orderDate: expectedDate ? formatDatetimeUpdate(moment(expectedDate, 'DD/MM/YYYY').format('DD/MM/YYYY HH:mm:ss')) : null,
                paymentStatus: status,
                details: items,
                accountId: user.id,
                active: true
            };

            // Simulate API call
            console.log('Saving purchase order:', data);

            $.ajax({
                    url: systemURL + "purchaseOrder/api/AddOrUpdate",
                    type: "POST",
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                    data: JSON.stringify(data),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == "200" && responseData.message === "SUCCESS") {
                            setTimeout(function() {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Thành công',
                                    text: 'Đã lưu đơn nhập hàng thành công!'
                                }).then(() => {
                                    $('#purchaseOrderModal').modal('hide');
                                    purchaseOrderTable.ajax.reload();
                                });
                            }, 500);
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi, vui lòng thử lại',
                            'error'
                        );
                    }
                });

        }

        async function viewPurchaseOrder(id) {
            const mockData = await getById(id);
            // Simulate API call
            currentPurchase = mockData;
            // For demo purposes, use mock data
            setTimeout(function() {
                
                populateViewModal(mockData);
            }, 300);
        }

        function populateViewModal(data) {
            // Populate basic info
            $('#viewPoCode').text(data.purchaseOrderCode);                  
            $('#viewPoSupplier').text(data.supplierName);
            $('#viewPoCreatedBy').text(data.accountName);
            $('#viewPoOrderDate').text(moment(data.createdTime).format('DD/MM/YYYY HH:mm'));
            $('#viewPoExpectedDate').text(data.orderDate ? moment(data.expectedDate).format('DD/MM/YYYY') : 'N/A');
            $('#viewPoNote').text('');
            $('#purchaseOrderId').val(data.id);

            // Set status with appropriate styling
            const statusHtml = renderStatus(data.paymentStatus);
            $('#viewPoStatus').html(statusHtml);

            // Populate items table
            let itemsHtml = '';
            let totalAmount = 0;

            data.details.forEach(function(item, index) {
                const total = item.quantity * item.unitPrice;
                totalAmount += total;

                itemsHtml += `
                    <tr data-item-id="${item.id}">
                        <td>${index + 1}</td>
                        <td>${item.ingredientName}</td>
                        <td>${item.unitName}</td>
                        <td class="text-end">${item.quantity}</td>
                        <td class="text-end">${formatCurrency(item.unitPrice)}</td>
                        <td class="text-end">${formatCurrency(total)}</td>
                        <td>${item.note || ''}</td>
                    </tr>
                `;
            });

            $('#viewPoItemsTable tbody').html(itemsHtml);
            $('#viewPoTotalAmount').text(formatCurrency(totalAmount));

            // Populate history table
            let historyHtml = '';

            data.histories.forEach(function(entry) {
                historyHtml += `
                    <tr>
                        <td>${moment(entry.createdTime).format('DD/MM/YYYY HH:mm')}</td>
                        <td>${entry.accountName}</td>
                        <td>${entry.activityDescription}</td>
                        <td>${entry.note || ''}</td>
                    </tr>
                `;
            });

            $('#poHistoryTable tbody').html(historyHtml);

            // Show/hide warehouse integration section
            if (data.paymentStatus === 'completed') {
                $('#warehouseIntegrationSection').removeClass('d-none');
                $('#warehouseReceiptCode').text('TX-IN-AUTO-' + data.purchaseOrderCode);
                $('#warehouseReceiptDate').text(moment(data.createdTime).format('DD/MM/YYYY HH:mm'));
                $('#warehouseReceiptUser').text(data.accountName);
            } else {
                $('#warehouseIntegrationSection').addClass('d-none');
            }

            // Set footer buttons based on status
            setViewModalFooterButtons(data.id, data.paymentStatus);

            // Show modal
            $('#viewPurchaseOrderModal').modal('show');
        }

        function setViewModalFooterButtons(id, status) {
            let buttonsHtml = `
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-info btn-print" data-id="${id}">
                    <i class="fas fa-print me-1"></i> In đơn hàng
                </button>
            `;

            switch (status) {
                case 'draft':
                    buttonsHtml += `
                        <button type="button" class="btn btn-primary btn-edit d-none" data-id="${id}">
                            <i class="fas fa-edit me-1"></i> Chỉnh sửa
                        </button>
                        <button type="button" class="btn btn-success btn-status-action" data-id="${id}" data-status="pending">
                            <i class="fas fa-paper-plane me-1"></i> Gửi đơn hàng
                        </button>
                        <button type="button" class="btn btn-danger btn-status-action" data-id="${id}" data-status="cancelled">
                            <i class="fas fa-times me-1"></i> Hủy đơn hàng
                        </button>
                    `;
                    break;
                case 'pending':
                    buttonsHtml += `
                        <button type="button" class="btn btn-success btn-status-action" data-id="${id}" data-status="approved">
                            <i class="fas fa-check me-1"></i> Xác nhận đơn hàng
                        </button>
                        <button type="button" class="btn btn-danger btn-status-action" data-id="${id}" data-status="cancelled">
                            <i class="fas fa-times me-1"></i> Hủy đơn hàng
                        </button>
                    `;
                    break;
                case 'approved':
                    buttonsHtml += `
                        <button type="button" class="btn btn-success btn-status-action" data-id="${id}" data-status="completed">
                            <i class="fas fa-truck me-1"></i> Đánh dấu đã nhận hàng
                        </button>
                        <button type="button" class="btn btn-danger btn-status-action" data-id="${id}" data-status="cancelled">
                            <i class="fas fa-times me-1"></i> Hủy đơn hàng
                        </button>
                    `;
                    break;
                case 'completed':
                    // No additional actions for completed orders
                    break;
                case 'cancelled':
                    // No additional actions for cancelled orders
                    break;
            }

            $('#viewPoFooter').html(buttonsHtml);
        }

        async function editPurchaseOrder(id) {
            const mockData = await getById(id);
            currentPurchase = mockData;
            // Simulate API call
            resetPurchaseOrderForm();
            console.log('Editing purchase order:', id);

            // For demo purposes, use mock data
            setTimeout(function() {
                populateEditModal(mockData);
            }, 300);
        }

        function populateEditModal(data) {
            // Set modal title
            $('#purchaseOrderModalTitle').html('<i class="fas fa-edit me-2"></i>Chỉnh sửa đơn nhập hàng');

            // Populate form
            $('#purchaseOrderId').val(data.id);
            $('#poCode').val(data.purchaseOrderCode);
            $('#poSupplier').val(data.supplierId).trigger('change');
            $('#poSupplier').prop('disabled', true);
            $('#poOrderDate').val(moment(data.createdTime).format('DD/MM/YYYY'));
            $('#poExpectedDate').val(data.orderDate ? moment(data.expectedDate).format('DD/MM/YYYY') : '');
            //$('#poNote').val(data.note);

            // Clear items table
            $('#poItemsTable tbody').empty();

            // Add items
            data.details.forEach(function(item) {
                addItemToTable(
                    item.ingredientId,
                    item.ingredientName,
                    item.unitName,
                    item.quantity,
                    item.unitPrice,
                    item.quantity * item.unitPrice,
                    ''
                );
            });

            // Show modal
            $('#purchaseOrderModal').modal('show');
        }

        async function deletePurchaseOrder(id) {
            Swal.fire({
                title: 'Xác nhận xóa',
                text: 'Bạn có chắc chắn muốn xóa đơn nhập hàng này?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    var data = await detailPurchase(id);
                    // Simulate API call
                    $.ajax({
                            url: systemURL + "purchaseOrder/api/delete",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(data),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 200 && responseData.message === "SUCCESS") {
                                    setTimeout(function() {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Thành công',
                                            text: 'Đã xóa đơn nhập hàng thành công!'
                                        });
                                        purchaseOrderTable.ajax.reload();
                                    }, 300);
                                }
                            },
                            error: function (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Lỗi!',
                                    'Đã xảy ra lỗi, vui lòng thử lại',
                                    'error'
                                );
                            }
                        });
                    // For demo purposes, show success message
                    
                }
            });
        }

        async function detailPurchase(id) {
                var data;
                await $.ajax({
                    url: systemURL + "purchaseOrder/api/detail/" + id,
                    method: "GET",
                    success: function (responseData) {
                        data = responseData.data[0];
                    },
                    error: function (e) {
                    },
                });
                return data;
            }

        async function changePurchaseOrderStatus(id, status) {
            let confirmTitle = 'Xác nhận thay đổi trạng thái';
            let confirmText = `Bạn có chắc chắn muốn thay đổi trạng thái đơn hàng thành "${getStatusText(status)}"?`;
            let confirmIcon = 'warning';
            let showWarehouseSelect = false;
            let warehouses = [];
            let user = JSON.parse(localStorage.getItem('profile'));

            var updatingObj = {
                "id": id,
                "totalPrice": currentPurchase.totalPrice ? currentPurchase.totalPrice : 0,
                "paymentStatus": status,
                "createdTime": currentPurchase.createdTime ? currentPurchase.createdTime : formatDatetimeUpdate(moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY HH:mm:ss')),
                "active": true,
                "accountId": user.id ? user.id : 1,
                "supplierId": currentPurchase.supplierId ? currentPurchase.supplierId : 0,
                "orderDate": currentPurchase.orderDate ? currentPurchase.orderDate : formatDatetimeUpdate(moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY HH:mm:ss')),
                "warehouseId": 1,
            };

            warehouses = await loadSelectWarehouse();

            if (status === 'cancelled') {
                confirmTitle = 'Xác nhận hủy đơn hàng';
                confirmText = 'Bạn có chắc chắn muốn hủy đơn nhập hàng này?';
                confirmIcon = 'warning';
            } else if (status === 'completed') {
                confirmTitle = 'Xác nhận nhận hàng';
                confirmText = 'Vui lòng chọn kho để lưu trữ nguyên liệu:';
                confirmIcon = 'info';
                showWarehouseSelect = true;
            }

            if (showWarehouseSelect) {
                Swal.fire({
            title: confirmTitle,
            html: `
                <p>${confirmText}</p>
                <div class="form-group mt-3">
                    <select id="receiveWarehouse" class="form-select">
                        <option value="">-- Chọn kho hàng --</option>
                    </select>
                </div>
            `,
            icon: confirmIcon,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Xác nhận',
            cancelButtonText: 'Hủy',
            didOpen: () => {
                // Load warehouses vào select
                

                let options = '<option value="">-- Chọn kho hàng --</option>';
                warehouses.forEach(function(warehouse) {
                    options += `<option value="${warehouse.id}">${warehouse.warehouseName}</option>`;
                });

                $('#receiveWarehouse').html(options);
            },
            preConfirm: () => {
                const warehouseId = $('#receiveWarehouse').val();
                if (!warehouseId) {
                    Swal.showValidationMessage('Vui lòng chọn kho hàng');
                    return false;
                }
                return warehouseId;
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const warehouseId = result.value;
                updatingObj.warehouseId = warehouseId;
                console.log(updatingObj);
                $.ajax({
                    url: systemURL + "purchaseOrder/api/UpdateStatus",
                    type: "POST",
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                    data: JSON.stringify(updatingObj),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == "200" && responseData.message === "SUCCESS") {
                            setTimeout(function() {
                                setTimeout(function() {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Thành công',
                                        text: 'Đã nhận hàng và tạo phiếu nhập kho thành công!'
                                    });
                                    $('#viewPurchaseOrderModal').modal('hide');
                                    purchaseOrderTable.ajax.reload();
                                }, 300);
                            }, 500);
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi, vui lòng thử lại',
                            'error'
                        );
                    }
                });
            }
        });
            }else {

            Swal.fire({
                title: confirmTitle,
                text: confirmText,
                icon: confirmIcon,
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Xác nhận',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log(updatingObj);
                    // Simulate API call
                    $.ajax({
                    url: systemURL + "purchaseOrder/api/UpdateStatus",
                    type: "POST",
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                    data: JSON.stringify(updatingObj),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == "200" && responseData.message === "SUCCESS") {
                            setTimeout(function() {
                                let successMessage = 'Đã thay đổi trạng thái đơn hàng thành công!';

                                Swal.fire({
                                    icon: 'success',
                                    title: 'Thành công',
                                    text: successMessage
                                });
                                $('#viewPurchaseOrderModal').modal('hide');
                                purchaseOrderTable.ajax.reload();
                            }, 300);
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi, vui lòng thử lại',
                            'error'
                        );
                    }
                });
                }
            });}
        }

        function printPurchaseOrder(id) {
            // In a real app, you would redirect to a print page or open a print dialog
            console.log('Printing purchase order:', id);

            // For demo purposes, show a message
            Swal.fire({
                icon: 'info',
                title: 'In đơn hàng',
                text: 'Chức năng in đơn hàng đang được phát triển.'
            });
        }

        function renderStatus(status) {
            let badgeClass = '';
            let statusText = '';
            let icon = '';

            switch (status) {
                case 'draft':
                    badgeClass = 'bg-secondary';
                    statusText = 'Nháp';
                    icon = 'fa-file';
                    break;
                case 'pending':
                    badgeClass = 'bg-primary';
                    statusText = 'Đã gửi';
                    icon = 'fa-paper-plane';
                    break;
                case 'approved':
                    badgeClass = 'bg-info';
                    statusText = 'Đã xác nhận';
                    icon = 'fa-check';
                    break;
                case 'completed':
                    badgeClass = 'bg-success';
                    statusText = 'Đã nhận hàng';
                    icon = 'fa-truck-loading';
                    break;
                case 'cancelled':
                    badgeClass = 'bg-danger';
                    statusText = 'Đã hủy';
                    icon = 'fa-times';
                    break;
                default:
                    badgeClass = 'bg-secondary';
                    statusText = status;
                    icon = 'fa-question';
            }

            return `<span class="badge ${badgeClass}"><i class="fas ${icon} me-1"></i>${statusText}</span>`;
        }

        function getStatusText(status) {
            switch (status) {
                case 'draft': return 'Nháp';
                case 'pending': return 'Đã gửi';
                case 'approved': return 'Đã xác nhận';
                case 'completed': return 'Đã nhận hàng';
                case 'cancelled': return 'Đã hủy';
                default: return status;
            }
        }

        function renderActions(id, status) {
            let actions = `
                <button type="button" class="btn btn-sm btn-info me-1 btn-view" data-id="${id}" title="Xem chi tiết">
                    <i class="fas fa-eye"></i>
                </button>
            `;

            if (status === 'draft') {
                actions += `
                    <button type="button" class="btn btn-sm btn-primary me-1 btn-edit" data-id="${id}" title="Chỉnh sửa">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-danger btn-delete" data-id="${id}" title="Xóa">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                `;
            }

            return actions;
        }

        function formatCurrency(value) {
            return new Intl.NumberFormat('vi-VN', { minimumFractionDigits: 0 }).format(value) + ' ₫';
        }

        async function getById(id) {
            var data;
                await $.ajax({
                    url: systemURL + "purchaseOrder/api/detaildto/" + id,
                    method: "GET",
                    success: function (responseData) {
                        data = responseData.data[0];
                    },
                    error: function (e) {
                    },
                });
                return data;
        }

        async function loadSelectWarehouse() {
            var data;
            try {
                const response = await $.ajax({
                    url: systemURL + 'warehouse/api/list',
                    type: 'GET',
                    contentType: 'application/json'
                });
                data = response.data;
            } catch (error) {
                console.error('Failed to load warehouses', error);
            }
            return data;
        }


        function getMockPurchaseOrder(id) {
            // Mock data for demo purposes
            return {
                id: id,
                code: 'PO-' + String(id).padStart(6, '0'),
                supplierId: 1,
                supplierName: 'Công ty TNHH Nguyên liệu A',
                orderDate: '2023-04-25T10:30:00',
                expectedDate: '2023-05-02',
                note: 'Đơn hàng nguyên liệu tháng 5/2023',
                status: id % 5 === 0 ? 'cancelled' : id % 4 === 0 ? 'completed' : id % 3 === 0 ? 'approved' : id % 2 === 0 ? 'pending' : 'draft',
                createdByName: 'Admin',
                totalAmount: 12500000,
                items: [
                    {
                        id: 1,
                        ingredientId: 1,
                        ingredientName: 'Cà phê Arabica',
                        unit: 'Kg',
                        quantity: 25,
                        unitPrice: 250000,
                        note: 'Loại hạt Premium'
                    },
                    {
                        id: 2,
                        ingredientId: 2,
                        ingredientName: 'Cà phê Robusta',
                        unit: 'Kg',
                        quantity: 30,
                        unitPrice: 180000,
                        note: ''
                    },
                    {
                        id: 3,
                        ingredientId: 4,
                        ingredientName: 'Đường nâu',
                        unit: 'Kg',
                        quantity: 15,
                        unitPrice: 45000,
                        note: 'Đóng gói 1kg/túi'
                    }
                ],
                history: [
                    {
                        timestamp: '2023-04-25T10:30:00',
                        userName: 'Admin',
                        action: 'Tạo đơn hàng',
                        note: ''
                    },
                    {
                        timestamp: '2023-04-25T10:35:00',
                        userName: 'Admin',
                        action: 'Thay đổi trạng thái từ "Nháp" sang "Đã gửi"',
                        note: ''
                    },
                    {
                        timestamp: '2023-04-26T14:20:00',
                        userName: 'Supplier',
                        action: 'Thay đổi trạng thái từ "Đã gửi" sang "Đã xác nhận"',
                        note: 'Dự kiến giao hàng đúng hẹn'
                    }
                ]
            };
        }
    });
</script>
    <!--end:Base load data-->
    <!--begin:setting in data table-->
    <script>
        function tableSearch() {
            
            table.draw();
        }
    </script>
    <!--end:setting in data table-->
    
    