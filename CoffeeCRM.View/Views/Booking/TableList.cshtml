@using CoffeeCRM.Data.Constants
@{
    Layout = "_Admin_Layout";
}

@{
    ViewData["ViewName"] = "Order";
}
<style>
    #tableOrderHistory td,
    #tableOrderHistory tr th {
        padding-left: 0.75rem;
    }

    .menuOption {
        display: none;
        position: absolute;
        width: 200px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 100;
        overflow: hidden;
        transition: opacity 0.3s ease, transform 0.3s ease;
        transform: translateY(10px);
        opacity: 0;
    }

        .menuOption.active {
            display: block;
            opacity: 1;
            transform: translate(-150%, 10%);
        }

        .menuOption div {
            padding: 12px;
            border-bottom: 1px solid #eaeaea;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .menuOption div:hover {
                background-color: #f1f1f1;
            }

            .menuOption div:last-child {
                border-bottom: none;
            }
    :root {
        --primary: #6c5ce7;
        --primary-dark: #5a49d8;
        --secondary: #fd79a8;
        --success: #00b894;
        --warning: #fdcb6e;
        --danger: #ff7675;
        --light: #f8f9fa;
        --dark: #2d3436;
        --coffee-light: #e17055;
        --coffee-dark: #d63031;
        --gray-100: #f8f9fa;
        --gray-200: #e9ecef;
        --gray-300: #dee2e6;
        --gray-400: #ced4da;
        --gray-500: #adb5bd;
    }


    .filter-section {
        background-color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

        .filter-section .form-select, .filter-section .form-control {
            border-radius: 8px;
            border: 1px solid #e0e0e0;
        }

    .status-legend {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-top: 15px;
    }

    .status-item {
        display: flex;
        align-items: center;
        font-size: 14px;
    }

    .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .table-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .table-card {
        background-color: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        position: relative;
    }

        .table-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

    .table-header {
        background: linear-gradient(135deg, #663ffa, #8e74ff);
        color: white;
        padding: 15px;
        font-weight: 600;
        font-size: 18px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-body {
        padding: 20px;
        position: relative;
    }

    .bg-primary-gradient {
        background: linear-gradient(135deg, #663ffa, #8e74ff);
    }

    .table-icon {
        text-align: center;
        margin-bottom: 15px;
    }

        .table-icon i {
            font-size: 40px;
            color: var(--bs-primary);
        }

    .table-status {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        display: flex;
        align-items: center;
    }

        .status-badge i {
            margin-right: 5px;
        }

    .status-empty {
        background-color: rgba(0, 184, 148, 0.1);
        color: var(--success);
    }

    .status-occupied {
        background-color: rgba(253, 121, 168, 0.1);
        color: var(--secondary);
    }

    .status-reserved {
        background-color: rgba(253, 203, 110, 0.1);
        color: var(--warning);
    }

    .people-badge {
        background-color: rgba(108, 92, 231, 0.1);
        color: var(--primary);
    }

    .table-info {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
        font-size: 14px;
        color: #666;
    }

        .table-info div {
            display: flex;
            align-items: center;
        }

        .table-info i {
            margin-right: 5px;
        }

    .table-actions {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 15px;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .table-card:hover .table-actions {
        opacity: 1;
    }

    .action-btn {
        border: none;
        border-radius: 8px;
        padding: 8px 15px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
    }

        .action-btn i {
            margin-right: 5px;
        }

        .action-btn.primary {
            background-color: var(--primary);
            color: white;
        }

            .action-btn.primary:hover {
                background-color: var(--primary-dark);
            }

        .action-btn.secondary {
            background-color: #e0e0e0;
            color: #333;
        }

            .action-btn.secondary:hover {
                background-color: #d0d0d0;
            }

    .user-dropdown {
        position: relative;
    }

        .user-dropdown .dropdown-toggle {
            background: none;
            border: none;
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--dark);
        }

            .user-dropdown .dropdown-toggle img {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                object-fit: cover;
            }

            .user-dropdown .dropdown-toggle::after {
                display: none;
            }

        .user-dropdown .dropdown-menu {
            right: 0;
            left: auto;
            padding: 10px 0;
            border: none;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .user-dropdown .dropdown-item {
            padding: 8px 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.2s;
        }

            .user-dropdown .dropdown-item:hover {
                background-color: #f8f9fa;
            }

            .user-dropdown .dropdown-item i {
                width: 20px;
                text-align: center;
            }

    /* Floor selector styles */
    .floor-selector {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        overflow-x: auto;
        padding-bottom: 10px;
    }

    .floor-btn {
        background-color: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 8px 15px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        min-width: 100px;
        text-align: center;
    }

        .floor-btn.active {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .floor-btn:hover:not(.active) {
            background-color: #f5f5f5;
        }

    #modal-payment .modal-content {
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    #modal-payment .form-control:disabled,
    #modal-payment .form-control[readonly] {
        background-color: #f8f9fa;
        opacity: 1;
    }

    #modal-payment .input-group-text {
        font-weight: 500;
    }

    #modal-payment .table th {
        font-weight: 600;
        color: #495057;
    }

    #modal-payment .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.02);
    }

    #modal-payment .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
        transition: all 0.2s;
    }

        #modal-payment .btn-primary:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    #modal-payment .btn-outline-secondary:hover {
        background-color: #6c757d;
        color: white;
        transform: translateY(-2px);
    }

    #modal-payment .form-select {
        border-radius: 0.375rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        #modal-payment .form-select:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    #modal-payment .card {
        transition: all 0.3s ease;
        border-radius: 0.5rem;
        overflow: hidden;
    }

        #modal-payment .card:hover {
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
        }

    /* Table Selection */
    .tb-table-option {
        cursor: pointer;
        transition: all 0.2s;
        position: relative;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.75rem;
        text-align: center;
        height: 100%;
    }

        .tb-table-option:hover {
            background-color: rgba(var(--bs-primary-rgb), 0.05);
            border-color: var(--bs-primary);
        }

        .tb-table-option.selected {
            background-color: rgba(var(--bs-primary-rgb), 0.1);
            border-color: var(--bs-primary);
        }

        .tb-table-option.unavailable {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .tb-table-status {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 15px;
        height: 15px;
        border-radius: 50%;
    }

        .tb-table-status.available {
            background-color: #00b894;
        }

        .tb-table-status.booked {
            background-color: #fdcb6e;
        }

        .tb-table-status.occupied {
            background-color: #ff7675;
        }

    .tb-table-name {
        font-weight: 600;
        font-size: 0.95rem;
        margin-bottom: 5px;
    }

    .tb-table-capacity {
        font-size: 0.8rem;
        color: #6c757d;
    }

    /* Status Selection */
    .tb-status-option {
        cursor: pointer;
        transition: all 0.2s;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.75rem;
        text-align: center;
        height: 100%;
    }

        .tb-status-option:hover {
            background-color: rgba(var(--bs-primary-rgb), 0.05);
            border-color: var(--bs-primary);
        }

        .tb-status-option.selected {
            background-color: rgba(var(--bs-primary-rgb), 0.1);
            border-color: var(--bs-primary);
        }

        .tb-status-option i {
            font-size: 1.2rem;
            margin-bottom: 5px;
            color: var(--bs-primary);
        }

    .tb-status-name {
        font-weight: 600;
        font-size: 0.9rem;
    }

    .tb-section-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #212529;
        display: flex;
        align-items: center;
    }

        .tb-section-title i {
            margin-right: 8px;
            color: var(--bs-primary);
        }

    /* Animation */
    .tb-fade-in {
        animation: fadeIn 0.3s ease;
    }
</style>

    <div class="container-fluid p-0">
    <!-- Header Row -->
    

    <!-- Body Row -->
    <div class="row m-2 p-0">
        <!-- Filter Section -->
        <div class="filter-section">
            <div class="row align-items-end">
                <div class="col-md-3 mb-3 mb-md-0">
                    <label for="floorSelect" class="form-label">Chọn tầng:</label>
                    <select class="form-select" id="floorSelect">
                        <option value="1">Tầng 1</option>
                        <option value="2">Tầng 2</option>
                        <option value="3">Tầng 3</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3 mb-md-0">
                    <label for="statusFilter" class="form-label">Trạng thái bàn:</label>
                    <select class="form-select" id="statusFilter">
                        <option value="all">Tất cả</option>
                        <option value="empty">Bàn trống</option>
                        <option value="occupied">Đang sử dụng</option>
                        <option value="reserved">Đã đặt trước</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3 mb-md-0">
                    <label for="orderFilter" class="form-label">Số hóa đơn:</label>
                    <select class="form-select" id="orderFilter">
                        <option value="all">Tất cả</option>
                        <option value="with-order">Có hóa đơn</option>
                        <option value="no-order">Không có hóa đơn</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-primary w-100">
                        <i class="fas fa-filter me-2"></i> Lọc
                    </button>
                </div>
            </div>

            <div class="status-legend mt-3">
                <div class="status-item">
                    <div class="status-dot" style="background-color: var(--success);"></div>
                    <span>Bàn trống</span>
                </div>
                <div class="status-item">
                    <div class="status-dot" style="background-color: var(--secondary);"></div>
                    <span>Đang sử dụng</span>
                </div>
                <div class="status-item">
                    <div class="status-dot" style="background-color: var(--warning);"></div>
                    <span>Đã đặt trước</span>
                </div>
                <div class="status-item">
                    <div class="status-dot" style="background-color: #aaa;"></div>
                    <span>Đang chờ thanh toán</span>
                </div>
            </div>
        </div>

        <!-- Floor Selector -->
        <div class="row">
            <div class="d-flex justify-content-between align-items-center">
                <!-- Filter bên trái -->
                <div class="floor-selector d-flex gap-2">

                    <button class="floor-btn active">Tầng 1</button>
                    <button class="floor-btn">Tầng 2</button>
                    <button class="floor-btn">Tầng 3</button>
                </div>

                <!-- Button bên phải -->
                <button type="button" class="btn btn-primary ms-2" data-bs-toggle="modal" data-bs-target="#bookingModal">
                    <i class="fas fa-calendar-check me-2"></i> Đặt bàn
                </button>
            </div>
        </div>

        <!-- Right Column: Table List -->
        <div id="tableOrganization" class="table-grid"></div>
    </div>
</div>
<div class="modal fade" id="modal-id">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header bg-primary text-white p-3">
                <div class="d-flex align-items-center">
                    <div class="btn btn-icon btn-sm btn-light me-2" id="model-back-btn" onclick="startModel($('#tableBooking-id').val())">
                        <i class="fas fa-arrow-left fs-4 text-primary"></i>
                    </div>
                    <h3 class="modal-title fs-4 fw-bold mb-0">Đặt món</h3>
                </div>
                <div class="btn btn-icon btn-sm btn-light" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-times fs-4 text-danger"></i>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="modal-body p-0">
                
                    <div class="row g-0">
                        <!-- Order History Section (Preserved) -->
                        <div class="col-xl" id="tableOrderHistory">
                            <div class="d-flex justify-content-between align-items-center p-4 border-bottom">
                                <h5 class="text-dark fw-bold fs-5 mb-0">
                                    Danh sách lịch sử đặt món
                                </h5>
                                <button type="button" class="btn btn-primary" data-bs-toggle="tooltip" id="addWarehouseEntryRequest" title="Tạo mới" onclick="newOrder()">
                                    <i class="fas fa-plus me-1"></i>
                                    Đặt món
                                </button>
                            </div>
                            <div class="p-4">
                                <div class="card shadow-sm">
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table table-hover display" id="tableDishOrderHistory">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th class="column-name">Người đặt</th>
                                                        <th class="column-quantity">Trạng thái</th>
                                                        <th class="column-price">Thời gian đặt</th>
                                                        <th class="column-action-2">Thao tác</th>
                                                    </tr>
                                                </thead>
                                                <thead id="rowSearch" class="d-none">
                                                    <tr>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td class="text-center">
                                                            <button id="btnTableSearch" class="btn btn-primary btn-sm me-1" title="Tìm kiếm">
                                                                <i class="fas fa-search"></i>
                                                            </button>
                                                            <button id="btnTableResetSearch" class="btn btn-secondary btn-sm" title="Reset">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Order history data will be loaded here -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Order Detail Section (Redesigned) -->
                        <div class="col-xl d-none" id="tableOrderDetail">
                            <!-- Two-panel layout for order details -->
                            <div class="d-flex flex-column flex-xl-row h-100">
                                <!-- Menu Section -->
                                <div class="flex-grow-1 border-end" style="width: 65%;">
                                    <!-- Table Info Bar -->
                                    <div class="bg-primary text-white p-2 d-flex justify-content-start">
                                        <div class="badge bg-light text-dark rounded-pill me-2 px-3 py-2">
                                            <i class="fas fa-utensils me-1"></i> Đặt món
                                        </div>
                                        <div class="badge bg-light text-dark rounded-pill me-2 px-3 py-2">
                                            <i class="fas fa-chair me-1"></i><span id="table-name">A3</span>
                                        </div>
                                        <div class="badge bg-light text-dark rounded-pill me-2 px-3 py-2">
                                            <i class="fas fa-users me-1"></i> <span id="table-capacity">6</span> người
                                        </div>
                                        <div class="badge bg-light text-dark rounded-pill px-3 py-2">
                                            <i class="fas fa-clock me-1"></i> <span id="current-time">15:30</span>
                                        </div>
                                    </div>

                                    <!-- Menu Header with Search -->
                                    <div class="p-3 bg-light border-bottom">
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-search text-muted"></i>
                                            </span>
                                            <input type="text" class="form-control border-start-0" id="searchDish" placeholder="Tìm kiếm món...">
                                        </div>
                                    </div>

                                    <!-- Category Tabs -->
                                    <div class="d-flex overflow-auto p-2 border-bottom" id="categoryTabs">
                                        <button class="btn btn-sm btn-primary rounded-pill me-2 px-3" data-category="all">Tất cả</button>
                                        <!-- Category tabs will be loaded here -->
                                    </div>

                                    <!-- Product Selection (Hidden but preserved for functionality) -->
                                    <div class="d-none">
                                        <select class="form-select dataSelect" id="productSearchForOrder" data-control="select2" data-dropdown-parent="#modal-id">
                                        </select>
                                        <input type="text" id="tableBooking-id" class="form-control d-none" />
                                        <input type="text" id="dishOrder-id" class="form-control d-none" />
                                    </div>

                                    <!-- Menu Items Grid -->
                                    <div class="p-3 overflow-auto" style="max-height: 500px;">
                                        <div class="row g-3" id="menuItemsGrid">
                                            <!-- Menu items will be loaded here -->
                                        </div>
                                    </div>
                                </div>

                                <!-- Order Cart Section -->
                                <div class="d-flex flex-column bg-light" style="width: 35%;">
                                    <!-- Cart Header -->
                                    <div class="p-3 border-bottom">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="fas fa-shopping-cart text-primary me-2"></i>
                                            <h5 class="fw-bold mb-0">Giỏ hàng</h5>
                                        </div>
                                        <div class="d-flex gap-2 mt-2">
                                            <span class="badge bg-light text-dark border">
                                                <i class="fas fa-receipt me-1"></i> Hóa đơn #<span id="order-number">1234</span>
                                            </span>
                                            <span class="badge bg-light text-dark border">
                                                <i class="fas fa-user me-1"></i> Nhân viên: <span id="staff-name">Admin</span>
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Cart Items -->
                                    <div class="p-3 overflow-auto flex-grow-1" style="max-height: 350px;">
                                        <div id="cart-items">
                                            <!-- Cart items will be loaded here -->
                                        </div>

                                        <!-- Empty Cart Message -->
                                        <div id="empty-cart" class="text-center py-5">
                                            <i class="fas fa-shopping-cart text-muted mb-3" style="font-size: 3rem;"></i>
                                            <p class="text-muted">Giỏ hàng trống</p>
                                            <p class="text-muted small">Vui lòng chọn món từ thực đơn</p>
                                        </div>
                                    </div>

                                    <!-- Order Summary -->
                                    <div class="p-3 border-top">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Tạm tính:</span>
                                            <span id="subtotal">0đ</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Giảm giá:</span>
                                            <span id="discount">0đ</span>
                                        </div>

                                        <hr>
                                        <div class="d-flex justify-content-between fw-bold text-primary">
                                            <span>Tổng cộng:</span>
                                            <span id="total">0đ</span>
                                        </div>

                                        <!-- Discount Section -->
                                        <div class="mt-3">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="fas fa-tag text-warning me-2"></i>
                                                <span class="fw-bold">Áp dụng giảm giá</span>
                                            </div>
                                            <div class="d-flex gap-1 mb-2">
                                                <button class="btn btn-sm btn-outline-warning discount-btn" data-discount="0">Không</button>
                                                <button class="btn btn-sm btn-outline-warning discount-btn" data-discount="10">10%</button>
                                                <button class="btn btn-sm btn-outline-warning discount-btn" data-discount="15">15%</button>
                                                <button class="btn btn-sm btn-outline-warning discount-btn" data-discount="20">20%</button>
                                                <button class="btn btn-sm btn-outline-warning discount-btn" data-discount="custom">Khác</button>
                                            </div>
                                            <div class="input-group input-group-sm">
                                                <input type="text" class="form-control" id="discountCode" placeholder="Mã giảm giá">
                                                <button class="btn btn-primary" type="button" id="applyDiscountBtn">Áp dụng</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Original Table (Hidden but preserved for functionality) -->
                            <div class="d-none">
                                <div class="card">
                                    <div class="card-block table-border-style">
                                        <div class="table-responsive">
                                            <table class="table table-hover display" id="tableDataProduct">
                                                <thead>
                                                    <tr>
                                                        <th class="column-name">Tên sản phẩm</th>
                                                        <th class="column-price">Giá</th>
                                                        <th class="column-quantity">Số lượng</th>
                                                        <th class="column-price">Thành tiền</th>
                                                        <th class="column-action-2">Thao tác</th>
                                                    </tr>
                                                </thead>
                                                <thead id="rowSearch" class="d-none">
                                                    <tr>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                        <td class="text-center">
                                                            <button id="btnTableSearch" class="btn btn-primary custom-btn-table me-1" title="Tìm kiếm">
                                                                <i class="fas fa-search"></i>
                                                            </button>
                                                            <button id="btnTableResetSearch" class="btn btn-secondary custom-btn-table" title="Reset">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                                <tfoot>
                                                </tfoot>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer bg-light">
                <div class="d-flex justify-content-between w-100">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i> Đóng
                        </button>
                        <button type="button" class="btn btn-outline-primary" id="printTempBtn">
                            <i class="fas fa-print me-1"></i> In tạm tính
                        </button>
                        <button type="button" class="btn btn-outline-primary" id="saveTempBtn">
                            <i class="fas fa-save me-1"></i> Lưu tạm
                        </button>
                        <button type="button" class="btn btn-outline-primary" id="paymentBtn">
                            <i class="fas fa-credit-card me-1"></i> Thanh toán
                        </button>
                    </div>
                    <button type="button" class="btn btn-success d-none" id="btnConfirmOrder">
                        <span class="indicator-label">
                            <i class="fas fa-check-circle me-1"></i> Xác nhận đơn hàng
                        </span>
                        <span class="indicator-progress">
                            Đang tải... <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Note Modal -->
    <div class="modal fade" id="noteModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm ghi chú</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" rows="4" id="noteText" placeholder="Nhập ghi chú cho món này..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-primary" id="saveNoteBtn">Lưu ghi chú</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- End booking table -->
<!-- Start booking payment-->
<div class="modal fade" id="modal-payment">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content border-0 shadow" ">
            <div class="modal-header bg-light py-3">
                <div class="d-flex align-items-center">
                    <h3 class="modal-title fw-bold text-primary mb-0">Thanh toán</h3>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form action="#">
                    <div class="row">
                        <div class="col-xl">
                            <div class="col-xl" id="tablePayment">
                                <div class="text-center mb-4">
                                    <h2 class="fw-bold text-primary">Hóa Đơn Thanh Toán</h2>
                                    <hr class="my-3 mx-auto" style="width: 50%; border-top: 2px solid #0d6efd; opacity: 0.5;">
                                </div>

                                <!-- Thông tin hóa đơn -->
                                <div class="mb-4 bg-light p-3 rounded-3 border">
                                    <div class="row">
                                        <div class="col-sm-6 d-none">
                                            <div class="form-group">
                                                <div class="input-group input-group-solid mb-3">
                                                    <span class="input-group-text bg-light border-end-0" id="basic-addon-invoiceCode"><strong>Mã hóa đơn:</strong></span>
                                                    <input type="text" disabled autocomplete="off" class="form-control bg-light border-start-0" id="invoice-invoiceCode" aria-label="invoiceCode" aria-describedby="basic-addon-invoiceCode" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <div class="input-group mb-0">
                                                    <span class="input-group-text bg-light fw-medium text-secondary border-end-0" id="basic-addon-createdTime">Ngày tạo</span>
                                                    <div class="form-control date datetimepicker border-start-0 input-createdTime" id="invoice-createdTimeDiv" style="padding:0px;">
                                                        <input type="text" autocomplete="off" id="invoice-createdTime" required class="form-control datepicker border-0" aria-label="createdTime" aria-describedby="basic-addon-createdTime" disabled />
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="d-none col-sm-6">
                                            <div class="form-group">
                                                <div class="input-group mb-3">
                                                    <span class="input-group-text" id="basic-addon-id">Mã table</span>
                                                    <input readonly type="number" autocomplete="off" class="form-control input-id" id="tableId" aria-label="id" aria-describedby="basic-addon-id" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <div class="input-group mb-0">
                                                    <span class="input-group-text bg-light fw-medium text-secondary border-end-0" id="basic-addon-invoiceCode"><strong>Tên bàn:</strong></span>
                                                    <input type="text" autocomplete="off" class="form-control border-start-0" id="invoice-tableId" aria-label="invoiceCode" aria-describedby="basic-addon-invoiceCode" disabled />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="d-none col-sm-6">
                                            <div class="form-group">
                                                <div class="input-group mb-3">
                                                    <span class="input-group-text" id="basic-addon-id">Mã</span>
                                                    <input readonly type="number" autocomplete="off" class="form-control input-id" id="accoutId" aria-label="id" aria-describedby="basic-addon-id" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <div class="input-group mb-0">
                                                    <span class="input-group-text bg-light fw-medium text-secondary border-end-0" id="basic-addon-accoutId"><strong>Nhân viên phụ trách:</strong></span>
                                                    <input type="text" autocomplete="off" class="form-control border-start-0" id="invoice-accoutId" aria-label="invoiceCode" aria-describedby="basic-addon-invoiceCode" disabled />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-header bg-white py-3">
                                        <h5 class="card-title mb-0 fw-bold text-primary">Chi tiết đơn hàng</h5>
                                    </div>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table table-hover table-striped mb-0" id="tableInvoiceDetail">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th class="column-name py-3 ps-2">Tên sản phẩm</th>
                                                        <th class="column-price py-3 ps-5">Giá</th>
                                                        <th class="column-quantity py-3 ps-2">Số lượng</th>
                                                        <th class="column-price py-3 ps-2">Thành tiền</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Dữ liệu sẽ được thêm vào đây -->
                                                </tbody>
                                                <tfoot class="table-light">
                                                    <tr>
                                                        <td colspan="4" class="text-end py-3">
                                                            <strong class="me-3 fs-5 text-dark">Tổng thanh toán:</strong>
                                                            <input disabled type="text" id="invoicedetail-totalPriceNotVAT" class="column-price form-control form-control-lg d-inline-block bg-light fw-bold text-primary" style="width: 180px;" />
                                                        </td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Phương thức thanh toán -->
                        
                            <div class="mt-4 p-3 bg-light rounded-3 border">
                                <label for="paymentMethod" class="form-label fw-bold mb-3"><i class="bi bi-credit-card me-2"></i>Phương thức thanh toán:</label>
                                <select id="payment-paymentId" class="form-select form-select-lg">
                                    <!-- Options will be added dynamically -->
                                </select>
                                <script>
                                    var paymentData = [];
                                    async function loadDataSelectPayment() {
                                        await $.ajax({
                                            url: systemURL + 'paymentmethod/api/list',
                                            type: 'GET',
                                            async: 'true',
                                            contentType: 'application/json',
                                            success: function (responseData) {
                                                // console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded category created');
                                                // debugger;
                                                var datapayment = responseData.data[0];
                                                paymentData = datapayment;
                                                //console.log(roleData);
                                            },
                                            error: function (e) {
                                                //console.log(e.message);
                                            }
                                        });
                                    }
                                    //console.log(roleData);
                                    $(document).ready(function () {
                                        loadDataSelectPayment();
                                        $.when(loadDataSelectPayment()).done(function () {
                                            paymentData.forEach(function (item) {
                                                $('#payment-paymentId').append(new Option(item.paymentName, item.paymentName, false, false)).trigger('change');
                                            })
                                        });
                                    });
                                </script>
                        </div>
                        <!-- Nút hành động -->
                    </div>

                </form>
            </div>
            <div class="modal-footer bg-light py-3">
                <button type="button" class="btn btn-primary btn-lg px-4" id="confirmPayment">
                    <span class="indicator-label">
                        <i class="bi bi-check-circle me-2"></i>Xác nhận thanh toán
                    </span>
                    <span class="indicator-progress d-none">
                        Đang tải... <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-outline-secondary btn-lg px-4" data-bs-dismiss="modal">
                    Đóng
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Start booking table-->
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <!-- Modal Header -->       
            <div class="modal-header bg-primary text-white">
                
                <div class="d-flex align-items-center">
                    <div class="btn btn-icon btn-sm btn-active-light-primary ms-2 me-2 d-none" id="booking-model-back-btn" onclick="hideBookingForm()">
                        <i class="la la-backspace fs-1 text-warning"><span class="path1"></span><span class="path2"></span></i>
                    </div>
                    <h5 class="modal-title" id="bookingModalLabel">
                        <i class="fas fa-calendar-check me-2"></i> Đặt bàn
                    </h5>
                </div>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body">
                <div class="col-xl" id="tableBookingHistory">
                    <div class="d-flex justify-content-between mb-5">
                        <h5 class="d-flex text-dark fw-bold fs-5 flex-column justify-content-center">
                            Danh sách lịch sử đặt bàn
                        </h5>

                        <button type="button" class="btn btn-primary ms-2" data-bs-toggle="tooltip" id="btnAddTableBooking" title="Tạo mới" onclick="showBookingForm()">
                            <i class="ki-duotone ki-plus fs-2"></i>
                            Đặt bàn
                        </button>
                    </div>
                    <div class="col-sm-12">
                        <div class="card">
                            <div class="card-block table-border-style">
                                <div class="table-responsive">
                                    <table class="table table-hover display" id="tableTableBookingHistory">
                                        <thead>
                                            <tr class="fw-bold fs-6 text-gray-800">
                                                <th>STT</th>
                                                <th style="width: 150px">Thời gian đặt</th>
                                                <th style="width: 150px">Tên khách</th>
                                                <th>SĐT</th>
                                                <th>Số bàn</th>
                                                <th>Thời gian nhận bàn</th>
                                                <th>Tiền cọc</th>                                          
                                                <th>Trạng thái</th>
                                                <th>Người đặt</th>
                                                <th>Ngày tạo</th>
                                                <th>Thao tác</th>
                                            </tr>
                                        </thead>
                                        <thead id="rowSearch" class="d-none">
                                            <tr>
                                                <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                <td><input type='text' class='form-control tableHeaderFilter' /></td>
                                                <td><input type='text' class='form-control tableHeaderFilter' /></td>

                                                <td class="text-center">
                                                    <button id="btnTableTableBookingSearch" class="btn btn-primary custom-btn-table me-1" title="Tìm kiếm">
                                                        <i class="fas fa-search"></i>
                                                    </button>
                                                    <button id="btnTableTableBookingResetSearch" class="btn btn-secondary custom-btn-table" title="Reset">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                        <tfoot>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                            <!-- Table end -->
                        </div>
                    </div>
                </div>
                <div class="col-xl d-none" id="addNewBookingForm">
                    <form id="bookingForm">
                    <!-- Table Selection Section -->
                    <div class="mb-4">
                        <div class="tb-section-title">
                            <i class="fas fa-chair"></i> Chọn bàn
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6 mb-3 mb-md-0">
                                <label for="floorTbSelect" class="form-label">Tầng</label>
                                <select class="form-select" id="floorTbSelect">
                                    <option value="all">Tất cả</option>
                                    <option value="1">Tầng 1</option>
                                    <option value="2">Tầng 2</option>
                                    <option value="3">Khu vực ngoài trời</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="capacitySelect" class="form-label">Số người</label>
                                <select class="form-select" id="capacitySelect">
                                    <option value="all">Tất cả</option>
                                    <option value="2">2 người</option>
                                    <option value="4">4 người</option>
                                    <option value="6">6 người</option>
                                    <option value="8">8 người</option>
                                    <option value="10+">10+ người</option>
                                </select>
                            </div>
                        </div>

                        <div class="row g-3" id="tableContainer">
                            <!-- Tables will be loaded here -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="tb-table-option">
                                    <div class="tb-table-status available"></div>
                                    <div class="tb-table-name">Bàn 1</div>
                                    <div class="tb-table-capacity">4 người</div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3 mb-3">
                                <div class="tb-table-option">
                                    <div class="tb-table-status available"></div>
                                    <div class="tb-table-name">Bàn 2</div>
                                    <div class="tb-table-capacity">6 người</div>
                                </div>
                            </div>
                        </div>

                        <!-- Selected Table Info -->
                        <div class="alert alert-primary d-none mt-3" id="selectedTableInfo">
                            <i class="fas fa-info-circle me-2"></i>
                            Bàn đã chọn: <span id="selectedTableName">Bàn 2</span> - <span id="selectedTableCapacity">6 người</span>
                        </div>
                    </div>

                    <!-- Booking Time Section -->
                    <div class="mb-4">
                        <div class="tb-section-title">
                            <i class="fas fa-clock"></i> Thời gian đặt bàn
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="bookingDate" class="form-label">Ngày đặt</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                                    <input type="text" class="form-control" id="bookingDate" placeholder="Chọn ngày">
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="bookingTime" class="form-label">Giờ đặt</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                    <input type="text" class="form-control" id="bookingTime" placeholder="Chọn giờ">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Customer Information Section -->
                    <div class="mb-4">
                        <div class="tb-section-title">
                            <i class="fas fa-user"></i> Thông tin khách hàng
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="customerName" class="form-label">Tên khách hàng <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="customerName" placeholder="Nhập tên khách hàng" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="customerPhone" class="form-label">Số điện thoại <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="customerPhone" placeholder="Nhập số điện thoại" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="customerNote" class="form-label">Ghi chú</label>
                            <textarea class="form-control" id="customerNote" rows="2" placeholder="Nhập ghi chú đặc biệt nếu có"></textarea>
                        </div>
                    </div>

                    <style>
                            .tb-status-option.readonly {
                                pointer-events: none; /* Không cho click */
                                opacity: 0.6; /* Làm mờ */
                                background-color: #f5f5f5; /* Nền hơi nhạt (có thể thêm nếu muốn rõ hơn) */
                            }

                    </style>
                    <!-- Booking Status Section -->
                    <div class="mb-4">
                        <div class="tb-section-title">
                            <i class="fas fa-tag"></i> Trạng thái đặt bàn
                        </div>

                        <div class="row g-3">
                            <div class="col-md-4 mb-3">
                                    <div class="tb-status-option selected" data-status="confirmed">
                                    <i class="fas fa-clock"></i>
                                    <div class="tb-status-name">Chờ xác nhận</div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="tb-status-option readonly" data-status="completed">
                                    <i class="fas fa-check-circle"></i>
                                    <div class="tb-status-name">Đã xác nhận</div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                    <div class="tb-status-option readonly" data-status="cancelled">
                                    <i class="fas fa-ban"></i>
                                    <div class="tb-status-name">Đã hủy</div>
                                </div>
                            </div>
                        </div>

                        <input type="hidden" id="bookingStatus" value="pending">
                    </div>



                    <!-- Deposit Section -->
                    <div class="mb-4">
                        <div class="tb-section-title">
                            <i class="fas fa-money-bill-wave"></i> Đặt cọc
                        </div>

                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="depositToggle">
                            <label class="form-check-label" for="depositToggle">Yêu cầu đặt cọc</label>
                        </div>

                        <div id="depositSection" class="d-none">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="depositAmount" class="form-label">Số tiền đặt cọc</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-money-bill"></i></span>
                                        <input type="text" class="form-control" id="depositAmount" placeholder="Nhập số tiền">
                                        <span class="input-group-text">VNĐ</span>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="paymentMethod" class="form-label">Phương thức thanh toán</label>
                                    <select class="form-select" id="paymentMethod">
                                        <option value="cash">Tiền mặt</option>
                                        <option value="card">Thẻ ngân hàng</option>
                                        <option value="transfer">Chuyển khoản</option>
                                        <option value="momo">Ví MoMo</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer bg-light">
                <div class="d-flex flex-column flex-md-row gap-2 w-100">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i> Đóng
                        </button>
                        <button type="button" class="btn btn-primary d-none" id="saveDraftBtn">
                            <i class="fas fa-save me-1"></i> Lưu nháp
                        </button>
                    </div>
                    <button type="button" class="btn btn-success ms-auto d-none" id="confirmBookingBtn">
                        <i class="fas fa-check me-1"></i> Xác nhận đặt bàn
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let tbBookingTable;
        var currentTableId = 0;
        var tableBookingUpdateId = 0;
        var currentBookingId = 0;
        $(document).ready(function() {

        flatpickr("#bookingDate", {
                dateFormat: "d/m/Y",
                minDate: "today",
                defaultDate: "today"
            });

            flatpickr("#bookingTime", {
                enableTime: true,
                noCalendar: true,
                dateFormat: "H:i",
                time_24hr: true,
                defaultDate: "18:00"
            });

            $('#bookingModal').on('shown.bs.modal', function () {
                initTableBooking();
                tbBookingTable.draw();
                hideBookingForm();
                loadTables();
                resetForm();
            });

            $('#bookingModal').on('hide.bs.modal', function () {
                currentTableId = 0;
            });

            $('#floorTbSelect, #capacitySelect').change(function() {
                filterTables();
            });

            $(document).on('click', '.tb-table-option:not(.unavailable)', function() {
                $('.tb-table-option').removeClass('selected');
                $(this).addClass('selected');

                const tableName = $(this).find('.tb-table-name').text();
                const tableCapacity = $(this).find('.tb-table-capacity').text();

                $('#selectedTableName').text(tableName);
                $('#selectedTableCapacity').text(tableCapacity);
                $('#selectedTableInfo').removeClass('d-none');
            });

            $('.tb-status-option').click(function() {
                $('.tb-status-option').removeClass('selected');
                $(this).addClass('selected');

                const status = $(this).data('status');
                $('#bookingStatus').val(status);
            });

            $('#depositToggle').change(function() {
                if ($(this).is(':checked')) {
                    $('#depositSection').removeClass('d-none');
                } else {
                    $('#depositSection').addClass('d-none');
                }
            });

            $('#depositAmount').on('input', function() {
                let value = $(this).val().replace(/\D/g, '');
                if (value) {
                    value = parseInt(value).toLocaleString('vi-VN');
                    $(this).val(value);
                }
            });


            $('#confirmBookingBtn').click(function() {
                if (validateForm(true)) {
                    const bookingData = getBookingData();
                    bookingData.isDraft = false;
                    hideBookingForm();
                    saveBooking(bookingData);
                }
            });
        });

        function openBookingModal(tableId) {
            currentTableId = tableId;
            $('#bookingModal').modal('show');
            initTableBooking();
            hideBookingForm();
            tbBookingTable.draw();
        }


        function initTableBooking() {
            tbBookingTable = $('#tableTableBookingHistory').DataTable({
                processing: true,            
                serverSide: true,
                paging: true,
                searching: { regex: true },
                order: [1, 'desc'],
                "oLanguage": {
                    "sUrl": "/js/Vietnamese.json"
                },
                ajax: {
                    url: systemURL + "tableBooking/api/list-server-side",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function (d) {
                        d.searchAll = "";
                        d.tableId = currentTableId;
                        return JSON.stringify(d);
                    }
                },
                columns: [
                {
                    data: 'id',
                    render: function (data, type, row, meta) {
                        var info = tbBookingTable.page.info();
                        var stt = meta.row + 1 + info.page * info.length;
                        return stt;
                    }
                },
                {
                data: "bookingTime",
                render: function (data) {
                    return moment(data).format("HH:mm DD/MM/YYYY");
                },
                className: "fw-bold",
                style: "color: #044688;" 
            },
            {
                data: "customerName",
                render: function (data) {
                    return data || ""; 
                }
            },
            {
                data: "phoneNumber",
                render: function (data) {
                    return data || "";
                }
            },
            {
                data: "tableName",
                render: function (data) {
                    return data || "";
                }
            },
            {
                data: "checkinTime",
                        render: function (data) {
                            let timeData = (data != null) ? moment(data).format("DD/MM/YYYY HH:mm") : ""
                            return timeData;
                        }
            },
            {
                data: "deposit",
                render: function (data) {
                    return data || "";
                }
            },
            {
                data: "bookingStatus",
                render: function (data) {                
                    let statusText = "";
                    let statusClass = "";
                    switch (data) {
                        case 'confirmed':
                            statusText = "Đã xác nhận";
                            statusClass = "fw-bold" 
                            style = "color: green;"; 
                            break;
                        case 'cancelled':
                            statusText = "Đã huỷ";
                            statusClass = "fw-bold" 
                            style = "color: red;";
                            break;
                        case 'completed':
                            statusText = "Đã hoàn thành";
                            statusClass = "fw-bold"
                            style = "color: blue;";
                            break;
                        case 'expired':
                            statusText = "Huỷ do hết hạn";
                            statusClass = "fw-bold"
                            style = "color: red;";
                            break;
                        default:
                            statusText = "Không xác định";
                            statusClass = "fw-bold";
                            style = "color: gray;";
                            break;
                    }
                    return `<span class="${statusClass}" style="${style}">${statusText}</span>`;
                }
            },
            {
                data: "orderer",
                render: function (data, type, row, meta) {
                        return "<span id='row" + row.id + "-column-id'>" + data + '<span>';
                    }
            },
            {
                data: "createdTime",
                render: function (data) {
                    // Định dạng ngày tạo theo kiểu: 02/12/2024 15:30:00
                    return moment(data).format("DD/MM/YYYY HH:mm:ss");
                }
            }
                ,
                {
                    data: 'id',
                    render: function (data, type, row, meta) {
                        if(row.bookingStatus == 'confirmed') {
                            return `
                                    <div class='d-flex justify-content-center gap-2'>
                                        <a title='Cập nhật' onclick='editBooking(${row.id})' class='me-2 btn_manage'>
                                            <span class='svg-icon-success svg-icon svg-icon-1 svg_teh009'>
                                                <span class='svg-icon-primary svg-icon svg-icon-1'>
                                                    <svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>
                                                        <path opacity='0.3' fill-rule='evenodd' clip-rule='evenodd' d='M2 4.63158C2 3.1782 3.1782 2 4.63158 2H13.47C14.0155 2 14.278 2.66919 13.8778 3.04006L12.4556 4.35821C11.9009 4.87228 11.1726 5.15789 10.4163 5.15789H7.1579C6.05333 5.15789 5.15789 6.05333 5.15789 7.1579V16.8421C5.15789 17.9467 6.05333 18.8421 7.1579 18.8421H16.8421C17.9467 18.8421 18.8421 17.9467 18.8421 16.8421V13.7518C18.8421 12.927 19.1817 12.1387 19.7809 11.572L20.9878 10.4308C21.3703 10.0691 22 10.3403 22 10.8668V19.3684C22 20.8218 20.8218 22 19.3684 22H4.63158C3.1782 22 2 20.8218 2 19.3684V4.63158Z' fill='currentColor'></path>
                                                        <path d='M10.9256 11.1882C10.5351 10.7977 10.5351 10.1645 10.9256 9.77397L18.0669 2.6327C18.8479 1.85165 20.1143 1.85165 20.8953 2.6327L21.3665 3.10391C22.1476 3.88496 22.1476 5.15129 21.3665 5.93234L14.2252 13.0736C13.8347 13.4641 13.2016 13.4641 12.811 13.0736L10.9256 11.1882Z' fill='currentColor'></path>
                                                        <path d='M8.82343 12.0064L8.08852 14.3348C7.8655 15.0414 8.46151 15.7366 9.19388 15.6242L11.8974 15.2092C12.4642 15.1222 12.6916 14.4278 12.2861 14.0223L9.98595 11.7221C9.61452 11.3507 8.98154 11.5055 8.82343 12.0064Z' fill='currentColor'></path>
                                                    </svg>
                                                </span>
                                            </span>
                                        </a>
                                        <a title='Huỷ đặt' onclick='updateStatus(${row.id}, "cancelled")' class='me-2 btn_manage'>
                                            <span class='svg-icon-danger svg-icon svg-icon-1'>
                                                <svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>
                                                    <path d='M5 9C5 8.44772 5.44772 8 6 8H18C18.5523 8 19 8.44772 19 9V18C19 19.6569 17.6569 21 16 21H8C6.34315 21 5 19.6569 5 18V9Z' fill='currentColor'></path>
                                                    <path opacity='0.5' d='M5 5C5 4.44772 5.44772 4 6 4H18C18.5523 4 19 4.44772 19 5V5C19 5.55228 18.5523 6 18 6H6C5.44772 6 5 5.55228 5 5V5Z' fill='currentColor'></path>
                                                    <path opacity='0.5' d='M9 4C9 3.44772 9.44772 3 10 3H14C14.5523 3 15 3.44772 15 4V4H9V4Z' fill='currentColor'></path>
                                                </svg>
                                            </span>
                                        </a>
                                                                <a title='Xác nhận' onclick='updateStatus(${row.id}, "completed")' class='me-2 btn_manage'>
                                                        <span class='svg-icon-success svg-icon svg-icon-1 svg_teh009'>
                                                        <i class="far fa-check-circle"></i></span>
                                                    </a>
                                    </div>
                                `;
                        }
                        return '';
                    }
                }
            ],
                columnDefs: [
                    { targets: "no-sort", orderable: false },
                    { targets: "no-search", searchable: false },
                    { orderable: false, targets: [-1, 0] },
                ],
                aLengthMenu: [
                    [10, 25, 50, 100],
                    [10, 25, 50, 100]
                ],
                drawCallback: function () {
                    $('#tableTableBookingHistory tfoot').html("");
                    $("#tableTableBookingHistory thead:nth-child(1) tr").clone(true).appendTo("#tableTableBookingHistory tfoot");
                    $('#tableTableBookingHistory tfoot tr').addClass("border-top");
                }
            });
        }

        function reGenTableBooking() {
                tbBookingTable.destroy();
                $(".tableHeaderFilter").val(null).trigger("change");
                $("#tableBookingHistory tbody").html('');
                initTableBooking();
            }

        function showBookingForm() {
            tbBookingTable.draw();
            $('#tableBookingHistory').addClass('d-none');
            $('#addNewBookingForm').removeClass('d-none');
            $('#booking-model-back-btn').removeClass('d-none');
            $('#confirmBookingBtn').removeClass('d-none');
        }

        function hideBookingForm(){
            $('#booking-model-back-btn').addClass('d-none');
            $('#addNewBookingForm').addClass('d-none');
            $('#tableBookingHistory').removeClass('d-none');
            $('#confirmBookingBtn').addClass('d-none');
            currentBookingId = 0;
        }

        function loadTables() {        
            $('#tableContainer').html('<div class="col-12 text-center py-4"><div class="spinner-border text-primary" role="status"></div><div class="mt-2">Đang tải danh sách bàn...</div></div>');
            processTableData(allTableOrigins);
        }

         function processTableData(apiTables) {
                tableBookings = apiTables.map(table => {
                    // Parse tableCode to extract floor and capacity
                    const codeParts = table.tableCode.split('-'); // ["TB", "101", "6"]
                    const floor = parseInt(codeParts[1].charAt(0)); // tầng là chữ số đầu của phần thứ hai
                    const capacity = parseInt(codeParts[2]);

                    // Return enhanced table object
                    return {
                        ...table,
                        floor: floor,
                        capacity: capacity
                    };
                });
                // Render tables
                renderTableBooking(tableBookings);
         }

            function renderTableBooking(tables) {
                let html = '';
                if (tables.length === 0) {
                    html = '<div class="col-12 text-center py-4">Không có bàn nào phù hợp với điều kiện lọc.</div>';
                } else {
                    tables.forEach(table => {
                        const isUnavailable = table.tableStatus === 'booked' || table.tableStatus === 'occupied';

                        html += `
                            <div class="col-6 col-md-3 mb-3" data-floor="${table.floor}" data-capacity="${table.capacity}">
                                <div class="tb-table-option ${isUnavailable ? 'unavailable' : ''}" data-id="${table.id}">
                                    <div class="tb-table-status ${table.tableStatus}"></div>
                                    <div class="tb-table-name">${table.tableName}</div>
                                    <div class="tb-table-capacity">${table.capacity} người</div>
                                </div>
                            </div>
                        `;
                    });
                }

                $('#tableContainer').html(html);
            }
        function filterTables() {
                const floor = $('#floorTbSelect').val();
                const capacity = $('#capacitySelect').val();

                let filteredTables = [...tableBookings];

                if (floor !== 'all') {
                    filteredTables = filteredTables.filter(table => table.floor === parseInt(floor));
                }

                if (capacity !== 'all') {
                    let capacityValue = parseInt(capacity);
                    if (isNaN(capacityValue)) {
                        capacityValue = 10;
                        filteredTables = filteredTables.filter(table => table.capacity >= capacityValue);
                    } else {
                        filteredTables = filteredTables.filter(table => table.capacity === capacityValue);
                    }
                }

                renderTableBooking(filteredTables);
            }
        function validateForm(isConfirm) {
            // Reset previous validation errors
            $('.is-invalid').removeClass('is-invalid');

            let isValid = true;

            // Check if a table is selected
            if (!$('.tb-table-option.selected').length) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Chưa chọn bàn',
                    text: 'Vui lòng chọn một bàn để đặt.'
                });
                isValid = false;
                return isValid;
            }

            // Check booking date and time
            if (!$('#bookingDate').val()) {
                $('#bookingDate').addClass('is-invalid');
                isValid = false;
            }

            if (!$('#bookingTime').val()) {
                $('#bookingTime').addClass('is-invalid');
                isValid = false;
            }

            // Check customer information
            if (isConfirm) {
                if (!$('#customerName').val()) {
                    $('#customerName').addClass('is-invalid');
                    isValid = false;
                }

                if (!$('#customerPhone').val()) {
                    $('#customerPhone').addClass('is-invalid');
                    isValid = false;
                }
            }

            // Check deposit amount if deposit is required
            if ($('#depositToggle').is(':checked') && !$('#depositAmount').val()) {
                $('#depositAmount').addClass('is-invalid');
                isValid = false;
            }

            // Show validation error message
            if (!isValid && isConfirm) {
                Swal.fire({
                    icon: 'error',
                    title: 'Thông tin chưa đầy đủ',
                    text: 'Vui lòng điền đầy đủ thông tin bắt buộc.'
                });
            }

            return isValid;
        }

        function getBookingDataById(bookingId) {
          const dataTable = $("#tableTableBookingHistory").DataTable()
          const data = dataTable.rows().data()

          for (let i = 0; i < data.length; i++) {
            if (data[i].id === bookingId) {
              return data[i]
            }
          }

          return null
        }

        async function updateStatus(id, newStatus) {
             const bookingData = getBookingDataById(id);
             
             bookingData.bookingStatus = newStatus;

             const objStatus = bookingData;

          if (!bookingData) {
            Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: "Không tìm thấy thông tin đặt bàn!",
            })
            return
          }

          Swal.fire({
            title: 'Xác nhận thay đổi trạng thái?',
            text: "",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Xác nhận',
            cancelButtonText: 'Huỷ'
        }).then((result) => {
            if (result.value) {
                //CALL AJAX TO UPDATE
                if (id > 0) {
                    $.ajax({
                        url: systemURL + "tableBooking/api/addOrUpdate",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(objStatus),
                        success: function (responseData) {
                            if (responseData.status == 200 && responseData.message === "SUCCESS") {
                                tbBookingTable.draw();
                                loadTableList();
                                Swal.fire(
                                    'Thành Công!',
                                    'Đã cập nhật',
                                    'success'
                                );
                            }
                            
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                    'Lỗi!',
                                    'Đã xảy ra lỗi, vui lòng thử lại',
                                    'error'
                                );
                            // Remove loading indication
                            submitButton.removeAttribute('data-kt-indicator');
                            // Enable button
                            submitButton.disabled = false;
                        }
                    });
                };
            }
            });
        }

        function editBooking(bookingId) {
            showBookingForm();
            tableBookingUpdateId = bookingId;
          const bookingData = getBookingDataById(bookingId);

          if (!bookingData) {
            Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: "Không tìm thấy thông tin đặt bàn!",
            })
            return
          }

          resetForm()

          selectTableById(bookingData.tableId)

          $("#customerName").val(bookingData.customerName || "")
          $("#customerPhone").val(bookingData.phoneNumber || "")

          if (bookingData.bookingTime) {
            const bookingDateTime = new Date(bookingData.bookingTime)

            const bookingDate = formatDate(bookingDateTime, "d/m/Y")
            $("#bookingDate").val(bookingDate)

            const bookingTime = formatDate(bookingDateTime, "H:i")
            $("#bookingTime").val(bookingTime)

            if (window.bookingDatePicker) {
              window.bookingDatePicker.setDate(bookingDate)
            }

            if (window.bookingTimePicker) {
              window.bookingTimePicker.setDate(bookingTime)
            }
          }

          setBookingStatus(bookingData.bookingStatus)

          if (bookingData.deposit && Number.parseFloat(bookingData.deposit) > 0) {
            $("#depositToggle").prop("checked", true)
            $("#depositSection").removeClass("d-none")

            // Format số tiền đặt cọc
            const formattedDeposit = Number.parseFloat(bookingData.deposit).toLocaleString("vi-VN")
            $("#depositAmount").val(formattedDeposit)
          } else {
            $("#depositToggle").prop("checked", false)
            $("#depositSection").addClass("d-none")
            $("#depositAmount").val("")
          }

          // Hiển thị modal
          $("#bookingModal").modal("show")

          // Lưu ID đặt bàn hiện tại để sử dụng khi cập nhật
          $("#bookingModal").data("bookingId", bookingId)

          // Thay đổi tiêu đề modal và nút xác nhận
          $("#bookingModalLabel").html('<i class="fas fa-edit me-2"></i> Cập nhật đặt bàn')
          $("#confirmBookingBtn").html('<i class="fas fa-save me-1"></i> Cập nhật')
        }

        function selectTableById(tableId) {
          // Bỏ chọn tất cả các bàn
          $(".tb-table-option").removeClass("selected")

          // Tìm và chọn bàn có ID tương ứng
          const tableElement = $(`.tb-table-option[data-id="${tableId}"]`)

          if (tableElement.length > 0) {
            tableElement.addClass("selected")

            // Cập nhật thông tin bàn đã chọn
            const tableName = tableElement.find(".tb-table-name").text()
            const tableCapacity = tableElement.find(".tb-table-capacity").text()

            $("#selectedTableName").text(tableName)
            $("#selectedTableCapacity").text(tableCapacity)
            $("#selectedTableInfo").removeClass("d-none")
          } else {
            // Nếu không tìm thấy bàn trong danh sách hiện tại, có thể cần tải lại danh sách bàn
            // hoặc hiển thị thông báo
            console.warn(`Không tìm thấy bàn có ID: ${tableId} trong danh sách hiện tại`)

            // Tìm bàn trong mảng tables toàn cục
            const tableInfo = allTableOrigins.find((t) => t.id === tableId)

            if (tableInfo) {
              // Hiển thị thông tin bàn dù không thể chọn trực quan
              $("#selectedTableName").text(tableInfo.tableName)
              $("#selectedTableCapacity").text(`${tableInfo.capacity} người`)
              $("#selectedTableInfo").removeClass("d-none")

              // Thêm thông báo rằng bàn này có thể không khả dụng trong danh sách hiện tại
              $("#selectedTableInfo").append(
                '<div class="mt-2 text-warning"><i class="fas fa-exclamation-triangle me-1"></i> Bàn này có thể không khả dụng trong danh sách hiện tại.</div>',
              )
            }
          }
        }

                function setBookingStatus(status) {
          // Bỏ chọn tất cả các trạng thái
          $(".tb-status-option").removeClass("selected")

          // Ánh xạ trạng thái từ API sang trạng thái UI
          let uiStatus = "confirmed" // Mặc định là chờ xác nhận

          switch (status) {
            case "confirmed":
              uiStatus = "confirmed" // Đã xác nhận
              break
            case "cancelled":
            case "expired":
              uiStatus = "cancelled" // Đã hủy
              break
            case "completed":
              uiStatus = "completed" // Đã hoàn thành (nếu có trong UI)
              // Nếu UI không có trạng thái 'completed', có thể sử dụng 'confirmed' thay thế
              if (!$(`.tb-status-option[data-status="completed"]`).length) {
                uiStatus = "confirmed"
              }
              break
          }

          // Chọn trạng thái tương ứng
          $(`.tb-status-option[data-status="${uiStatus}"]`).addClass("selected")
          $("#bookingStatus").val(uiStatus)
        }

                function formatDate(date, format) {
          if (!(date instanceof Date) || isNaN(date)) {
            return ""
          }

          const day = date.getDate().toString().padStart(2, "0")
          const month = (date.getMonth() + 1).toString().padStart(2, "0")
          const year = date.getFullYear()
          const hours = date.getHours().toString().padStart(2, "0")
          const minutes = date.getMinutes().toString().padStart(2, "0")

          if (format === "d/m/Y") {
            return `${day}/${month}/${year}`
          } else if (format === "H:i") {
            return `${hours}:${minutes}`
          }

          return ""
        }

        
        function getBookingData() {
            const selectedTable = $('.tb-table-option.selected');
            const tableId = selectedTable.data('id');
            const tableName = selectedTable.find('.tb-table-name').text();
            const bookingDate = $('#bookingDate').val();
                    let parts = bookingDate.split('/'); // ['23', '04', '2025']
                    let formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`; // '2025-04-23'
            const bookingTime = $('#bookingTime').val();
            let userData = localStorage.getItem('profile');
            let user = JSON.parse(userData);

            return {
                id: tableBookingUpdateId,
                tableId: tableId,
                accountId: user.id,
                bookingTime: `${formattedDate}T${bookingTime}:00.000Z`,
                customerName: $('#customerName').val(),
                phoneNumber: $('#customerPhone').val(),
                bookingStatus: $('#bookingStatus').val(),
                deposit: $('#depositToggle').is(':checked') ? $('#depositAmount').val().replace(/\./g, '') : 0,
                active: true
            };
        }

        // Save booking to API
         function saveBooking(bookingData) {
            // Show loading indicator
            const btnText = bookingData.isDraft ? 'Lưu nháp' : 'Xác nhận đặt bàn';
            const btnIcon = bookingData.isDraft ? 'save' : 'check';
            const $btn = bookingData.isDraft ? $('#saveDraftBtn') : $('#confirmBookingBtn');

            $btn.html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...`).prop('disabled', true);

            // Call API to save booking
            $.ajax({
                url: systemURL + 'tableBooking/api/addOrUpdate',
                method: 'POST',
                data: JSON.stringify(bookingData),
                contentType: 'application/json',
                beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                success: function(response) {
                    tbBookingTable.draw();
                    loadTableList();
                    handleBookingSuccess(response, bookingData.isDraft);
                },
                error: function(xhr) {
                    console.error('Error saving booking:', xhr);
                    handleBookingError(xhr);
                },
                complete: function() {
                    $btn.html(`<i class="fas fa-${btnIcon} me-1"></i> ${btnText}`).prop('disabled', false);
                }
            });
        }

        // Handle booking success
        function handleBookingSuccess(response, isDraft) {
            Swal.fire({
                icon: 'success',
                title: isDraft ? 'Đã lưu nháp' : 'Đặt bàn thành công',
                text: isDraft ? 'Đã lưu nháp thông tin đặt bàn.' : 'Đặt bàn thành công!',
                confirmButtonText: 'Đóng'
            }).then((result) => {
                if (!isDraft) {
                    // Reset form and close modal for confirmed bookings
                    resetForm();
                    $('#bookingModal').modal('hide');
                }
            });
        }

        // Handle booking error
        function handleBookingError(xhr) {
            let errorMessage = 'Đã xảy ra lỗi khi lưu thông tin đặt bàn. Vui lòng thử lại sau.';

            if (xhr.responseJSON && xhr.responseJSON.data) {
                errorMessage = xhr.responseJSON.data[0];
            }

            Swal.fire({
                icon: 'error',
                title: 'Lỗi',
                text: errorMessage
            });
        }

        // Reset form
        function resetForm() {
            // Reset form fields
            $('#bookingForm')[0].reset();

            // Reset table selection
            $('.tb-table-option').removeClass('selected');
            $('#selectedTableInfo').addClass('d-none');

            // Reset status selection
            $('.tb-status-option').removeClass('selected');
            $('.tb-status-option[data-status="pending"]').addClass('selected');
            $('#bookingStatus').val('pending');

            // Reset deposit section
            $('#depositSection').addClass('d-none');

            // Reset validation
            $('.is-invalid').removeClass('is-invalid');
        }
    </script>
</div>

<script>
    const submitButton = document.getElementById('btnConfirmOrder');
    const submitButtonPayment = document.getElementById('confirmPayment');
    $(document).ready(async function () {
        loadTableList();
        loadProductList();
        // Hàm này khi chọn sản phẩm cho vào danh sách để đặt món
        $("#productSearchForOrder").on("select2:select", function () {
            if ($("#productSearchForOrder").val()) {
                let dish = getProductById($("#productSearchForOrder").val());
                if (isExistProductInTable(dish.id)) {
                    swal.fire({
                        icon: 'warning',
                        title: 'Đặt món',
                        html: 'Sản phẩm đã có trong đơn.'
                    });
                } else {
                    tableProduct.row.add({
                        "id": 0,
                        "dishId": dish.id,
                        "dishName": dish.dishName,
                        "dishOrderStatusId": @DishOrderStatudConst.PROCESSING,
                        "price": dish.price,
                        "finalPrice": dish.price,
                        "quantity": 1,
                        "isEdit": false,
                    }).draw();
                }
            }
            //trigger change lại product
            $("#productSearchForOrder").val("").trigger("change");
            //Tính toán lại giá tiền cho toàn bộ bảng
            //calculateAllPrice();
            // }

        });
    });
</script>

<script>
    InitDishOrderHistory();
    var tableDishOrderHistory;
    function InitDishOrderHistory() {
        tableDishOrderHistory = $("#tableDishOrderHistory").DataTable({
            order: [[0, 'desc']],
            ordering: false,
            columns: [
                {
                    data: "ordererName",
                    render: function (data, type, row, meta) {
                        return `<strong><span style=' color: #044688;' class='fs-14' >${data}</span></strong>`;
                    },
                },
                {
                    data: "dishOrderStatusName",
                    render: function (data, type, row, meta) {
                        return `<strong><span style='' class='fs-14 ${(row.dishOrderStatusId == @DishOrderStatudConst.PROCESSING) ? "text-primary" : ""}${row.dishOrderStatusId == @DishOrderStatudConst.DONE ? "text-success" : ""}${row.dishOrderStatusId == @DishOrderStatudConst.CANCEL ? "text-danger" : ""}' >${data}</span></strong>`;
                    },
                },
                {
                    data: "createdTime",
                    render: function (data) {
                        var tempDate = new Date(data);
                        var displayValue = timeAgo(moment(data).format("DD/MM/YYYY HH:mm:ss"));
                        //return displayValue;
                        return `<span class="badge py-3 px-4" style="color:#04b440; background-color:#e6f8ec; font-size: 13px">${displayValue}<span></span></span>`;

                    }
                },
                {
                    data: 'id',
                    render: function (data, type, row, meta) {

                        return `
                                        <div class='overlay-edit-custom'>
                                                            <button title="Sửa" type='button' onclick='editOrder(${row.id},${row.dishOrderStatusId})' class='btn btn-icon btn-admin-primary'><i class="ki-duotone ki-notepad-edit fs-2x text-primary"><span class="path1"> </span><span class="path2"></span></i></button>
                                                    <button title="Hủy" type='button' onclick='cancelOrder(${data})' class='btn btn-icon btn-admin-danger ${row.dishOrderStatusId == @DishOrderStatudConst.PROCESSING ? "" : "d-none"}'><i class="ki-duotone ki-trash-square fs-2x text-danger "><span class="path1"></span><span class="path2"> </span><span class="path3"></span><span class="path4"> </span></i></button>
                                        </div>
                                    `;
                    }
                },
            ],
            createdRow: function (row, data, dataIndex) {
                $(row).attr('data-productId', data.productId);
                $(row).attr('data-id', data.id);
            },
            columnDefs: [
                { targets: "no-sort", orderable: false },
                { targets: "no-search", searchable: false },
                { orderable: false, targets: [-1, 0] },
            ],
            aLengthMenu: [
                [10, 25, 50, 100],
                [10, 25, 50, 100]
            ],
            columnDefs: [
                // {
                //     targets: 2,
                //     createdCell: function (td, cellData, rowData, row, col) {
                //         $(td).attr("data-attr", "quantity");
                //     }
                // },
            ],
            drawCallback: function () {
                $('#tableDishOrderHistory tfoot').html("");
                $("#tableDishOrderHistory thead:nth-child(1) tr").clone(true).appendTo("#tableDishOrderHistory tfoot");
                $('#tableDishOrderHistory tfoot tr').addClass("border-top");
            },
            "oLanguage": {
                "sUrl": "/js/Vietnamese.json"
            },
        })
    }

</script>

<script>
    let allTables = [];
    let allTableOrigins = [];

        $(".filter-section .btn-primary").on("click", () => {
      filterTables()
    })


    function loadTableList() {
        allTables = [];
        $.ajax({
            url: systemURL + "Table/api/Listdto",
            method: "GET",
            success: function (response) {
                if (response.status === "200") {
                    allTables = response.data;
                    allTableOrigins = response.data;
                    filterTables();
                }
            },
            error: function (xhr) {
                console.error("Lỗi gọi API:", xhr);
            }
        });
    }
        function filterTables() {
      const selectedFloor = $("#floorSelect").val()
      const selectedStatus = $("#statusFilter").val()
      const selectedOrder = $("#orderFilter").val()

      const container = $("#tableOrganization")
      container.empty()

      // Lọc bàn theo các điều kiện
      const filteredTables = allTables.filter((table) => {
        const match = table.tableCode.match(/TB-(\d{3})-(\d+)/)
        if (!match) return false

        // Lọc theo tầng
        const floor = Number.parseInt(match[1].charAt(0))
        if (floor != selectedFloor && selectedFloor !== "all") return false

        // Lọc theo trạng thái bàn
        if (selectedStatus !== "all") {
          if (selectedStatus === "empty" && table.tableStatus !== "available") return false
          if (selectedStatus === "occupied" && table.tableStatus !== "occupied") return false
          if (selectedStatus === "reserved" && table.tableStatus !== "booked") return false
        }

        // Lọc theo số hóa đơn
        if (selectedOrder !== "all") {
          const hasOrder = table.totalBooking > 0
          if (selectedOrder === "with-order" && !hasOrder) return false
          if (selectedOrder === "no-order" && hasOrder) return false
        }

        return true
      })

      if (filteredTables.length === 0) {
        container.html('<div class="col-12 text-center text-muted">Không có bàn nào phù hợp với điều kiện lọc.</div>')
        return
      }

      filteredTables.forEach((table) => {
        const card = getTableCard(
          table.tableName,
          table.id,
          table.tableCode,
          table.tableStatus,
          table.totalBooking,
          table.lastBookingTime,
        )
        container.append(card)
      })
    }


    function getTableCard(tableName, id, tableCode, status, totalBooking, lastBookingTime) {
        const idTbMenu = "menu" + id;
        const match = tableCode.match(/TB-\d{3}-(\d+)/);
        const maxPeople = match ? match[1] : 4;
        const orderCount = totalBooking !== undefined ? totalBooking : 0;

        let timeText = "";
        if (lastBookingTime != null) {
            const absMinutes = Math.abs(lastBookingTime);
            const isPast = lastBookingTime < 0;

            if (absMinutes >= 60) {
                const hours = Math.floor(absMinutes / 60);
                const minutes = absMinutes % 60;
                timeText = `${isPast ? "Trễ " : "Còn "}${hours}h${minutes} phút`;
            } else {
                timeText = `${isPast ? "Trễ " : "Còn "}${absMinutes} phút`;
            }
        } else {
            timeText = "Chưa có lịch";
        }

        const statusClass = {
            "available": "status-empty",
            "occupied": "status-occupied",
            "booked": "status-reserved"
        }[status] || "status-empty";

        const statusText = {
            "available": "Trống",
            "occupied": "Đã dùng",
            "booked": "Đã đặt"
        }[status] || "Trống";

        const statusIcon = {
            "available": "check-circle",
            "occupied": "circle",
            "booked": "bookmark"
        }[status] || "check-circle";

        return `
            
                <div class="table-card" onclick="showMenu(event, ${id})">
                    <div class="table-header">
                        <span>${tableName}</span>
                        <span><i class="fas fa-users"></i> ${maxPeople}</span>
                    </div>
                    <div class="table-body">
                        <div class="table-icon">
                            <i class="fas fa-coffee"></i>
                        </div>
                        <div class="table-status">
                            <div class="status-badge ${statusClass}">
                                <i class="fas fa-${statusIcon}"></i> ${statusText}
                            </div>
                            <div class="status-badge people-badge">
                                <i class="fas fa-users"></i> ${maxPeople} người
                            </div>
                        </div>
                        <div class="table-info">
                            <div>
                                <i class="far fa-clock"></i> Đã đặt: ${orderCount}
                            </div>
                            <div>
                                <i class="far fa-hourglass"></i> ${timeText}
                            </div>
                        </div>

                                            <div class="table-actions">
                        <button class="action-btn primary" onclick="menuAction(this, ${id}, 'order')">
                            <i class="fas fa-utensils"></i> Gọi món
                        </button>
                        <button class="action-btn primary" onclick="menuAction(this, ${id}, 'booking')">
                            <i class="fas fa-plus-circle"></i> Đặt bàn
                        </button>

                    </div>
                    </div>
                    <div class="card-footer p-0">
                        
                    </div>
                </div>
                <div class="menuOption guestTable position-absolute hidden bg-white shadow rounded p-2 mt-1 z-100" data-tableBooking-id="${id}" id="${idTbMenu}">
                            <div onclick="menuAction(this, ${id}, 'order')" class="p-2 hover-bg-light"><i class="fas fa-utensils me-2 text-primary"></i> Đặt món</div>
                            <div onclick="menuAction(this, ${id}, 'booking')" class="p-2 hover-bg-light"><i class="fas fa-calendar-check me-2 text-primary"></i> Đặt bàn</div>
                            <div onclick="menuAction(this, ${id}, 'occupied')" class="p-2 hover-bg-light"><i class="fas fa-chair me-2 text-primary"></i> Chọn bàn</div>
                            <div onclick="menuAction(this, ${id}, 'available')" class="p-2 hover-bg-light"><i class="fas fa-trash me-2 text-primary"></i> Làm trống</div>
                            <div onclick="menuAction(this, ${id}, 'payment')" class="p-2 hover-bg-light"><i class="fas fa-credit-card me-2 text-primary"></i> Thanh toán</div>
                        </div>
            
        `;
    }
</script>

<!-- #region Ẩn hiện menu khi click vào bàn và modal đặt đồ ăn-->
<script>
    $(window).on('click', function (e) {
        // Kiểm tra xem click có phải vào guestTable hoặc menu không
        if (!$(e.target).closest('.guestTable').length && !$(e.target).closest('.menuOption').length) {
            $('.menuOption').removeClass('active');  // Đóng menu nếu click ra ngoài
        }
    });
    function ModalBooking() {
        $("#modal-id").modal('show');
    }
    function makePayment() {
        $("#modal-payment").modal('show');
    }
    function showMenu(event, menuId) {
        event.stopPropagation();
        // Ẩn tất cả các menu trước khi hiển thị menu tương ứng
        $('.menuOption').removeClass('active');
        // Lấy phần tử menu cần hiển thị từ menuId
        const $menu = $("#menu" + menuId);
        // Lấy phần tử guestTable
        const $guestTable = $(event.currentTarget);
        // Tính toán vị trí của guestTable để đặt vị trí cho menu
        const rect = $guestTable[0].getBoundingClientRect();
            $menu.css({
        'top': (rect.top + window.scrollY) + 'px',
        'left': (rect.right + window.scrollX + 10) + 'px' // 10px offset from the right edge
    }).addClass('active');
        // Ngừng truyền sự kiện để tránh việc đóng menu ngay sau khi mở
        event.stopPropagation();
    }
    async function menuAction(element, menuId, actionName) {
        $('.menuOption').removeClass('active');
        $("#tableBooking-id").val($(element).closest('.menuOption').data('tablebooking-id'))

        // Nếu hành động là order - đặt bàn thì mở modal.
        if (actionName == 'order') {
            await startModel(menuId);
            ModalBooking();
        }

        // Hành động booking - đặt bàn
        else if(actionName ==  'booking') {
            openBookingModal(menuId);
        }

        // Chọn bàn (occupied)
        else if(actionName == 'occupied') {
            await selectTable(menuId);
        }

        // Làm trống bàn (available)
        else if(actionName == 'available') {
            await makeAvailable(menuId);
        }
        else if(actionName == 'payment') {
            await startInvoice(menuId);
            await makePayment();
        }
        // Code của các hành động tiếp theo thì viết dưới đây
    }
    async function startModel(tableId) {
        tableDishOrderHistory.clear().draw();
        $('#model-back-btn').addClass('d-none');
        $('#tableOrderHistory').fadeIn(10);
        $('#tableOrderDetail').addClass('d-none');
        $('#btnConfirmOrder').addClass('d-none');
        var data = await httpService.getAsync("dishorder/api/DetailByTableId/" + tableId);
        if (data.status == "200") {
            data.data[0].forEach((item) => {    
                tableDishOrderHistory.row.add({
                    "id": item.id,
                    "ordererName": item.ordererName,
                    "dishOrderStatusId": item.dishOrderStatusId,
                    "dishOrderStatusName": item.dishOrderStatusName,
                    "createdTime": item.createdTime,
                }).draw();
            })
        } else {
            swal.fire({
                icon: 'error',
                title: 'Đặt món',
                html: 'Đã xảy ra lỗi, vui lòng thử lại sau'
            });
        }
    }
    async function startInvoice(tableId) {
        tableInvoiceDetail.clear().draw();
        // Gán vào input người phụ trách
        $('#confirmPayment').addClass('d-none');
        setAcountName()
        generateInvoiceCode();
        var tb = await getTableInfor(tableId);
        $("#invoice-tableId").val(tb.tableName);
        $("#invoice-createdTime").val(moment(new Date()).format("DD/MM/YYYY HH:mm:ss"));
        var data = await httpService.getAsync("dishorderdetail/api/DishDetailByTableId/" + tableId);
        var sumPrice = 0;
        if (data.status == "200") {
            if(data.data[0].length > 0) {
                $('#confirmPayment').removeClass('d-none');
            }
            data.data[0].forEach((item) => {
                tableInvoiceDetail.row.add({
                    "dishId": item.dishId,
                    "dishName": item.dishName,
                    "quantity": item.quantity,
                    "price": item.price,
                    "totalPrice": item.totalPrice,
                }).draw();
                sumPrice += item.price * item.quantity;
            })
            
            $("#invoicedetail-totalPriceNotVAT").val(priceFormatCurrency(sumPrice));
        } else {    
            swal.fire({
                icon: 'error',
                title: 'Thanh toán',
                html: 'Đã xảy ra lỗi, vui lòng thử lại sau'
            });
        }
    }
    // Hàm định dạng ngày hiện tại: YYYYMMDD
    function getCurrentDateFormatted() {
        const today = new Date();
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0'); // Tháng bắt đầu từ 0
        const dd = String(today.getDate()).padStart(2, '0');
        return `${yyyy}${mm}${dd}`;
    }

    async function setAcountName() {
        let userData = localStorage.getItem('profile');
        let user = JSON.parse(userData);
        $("#accoutId").val(user.id);
        let accountName = user.fullName;
        $("#invoice-accoutId").val(accountName);
    }
    // Hàm tạo mã hóa đơn
    async function generateInvoiceCode() {

        const response = await $.ajax({
            url: systemURL + "invoice/api/Count", // API trả về thông tin bàn
            type: 'GET',
            dataType: 'json'
        });
        let count;
        if(response == 0){
            count = 1;
        }else{
            count++;
        }
        const currentDate = getCurrentDateFormatted();
        // Gán mã hóa đơn vào input
        $("#invoice-invoiceCode").val("HD-" + currentDate +"-" + (count + 1).toString().padStart(4, "0"));
    }
    async function getTableInfor(tableId) {
        $("#tableId").val(tableId);
        const response = await $.ajax({
            url: `${systemURL}Table/api/detail/${tableId}`, // API trả về thông tin bàn
            type: 'GET',
            dataType: 'json'
        });
        var tableDetail = response.data[0];
        
        return tableDetail;
    }

</script>
<!-- #endregion -->
<script>
        // Global variables
    let allDishes = [];
    let allCategories = [];
    let currentCategory = 'all';
    let currentDiscount = 0; // Default discount percentage
    let currentNoteItem = null;

    // Initialize when document is ready
    $(document).ready(function() {
        // Set current time
        updateCurrentTime();
        setInterval(updateCurrentTime, 60000); // Update time every minute

        // Load dish categories and dishes
        loadDishCategories();
        loadDishes();

        // Event listeners
        setupEventListeners();
    });

    // Update current time display
    function updateCurrentTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        $('#current-time').text(`${hours}:${minutes}`);
    }

    // Load dish categories from API
    function loadDishCategories() {
        $.ajax({
            url: systemURL + "Dishcategory/api/list",
            method: "GET",
            success: function(response) {
                if (response.status === "200") {
                    allCategories = response.data;
                    renderCategoryTabs();
                } else {
                    console.error("Error loading dish categories:", response);
                }
            },
            error: function(xhr) {
                console.error("API call error:", xhr);
            }
        });
    }

    // Load dishes from API
    function loadDishes() {
        $.ajax({
            url: systemURL + "Dish/api/list",
            method: "GET",
            success: function(response) {
                if (response.status === "200") {
                    allDishes = response.data;
                    renderMenuItems();
                } else {
                    console.error("Error loading dishes:", response);
                }
            },
            error: function(xhr) {
                console.error("API call error:", xhr);
            }
        });
    }

    // Render category tabs
    function renderCategoryTabs() {
        const $categoryTabs = $('#categoryTabs');

        // Clear existing tabs except "All"
        $categoryTabs.find('button:not(:first-child)').remove();

        // Add category tabs
        allCategories.forEach(category => {
            $categoryTabs.append(`
                <button class="btn btn-sm btn-outline-primary rounded-pill me-2 px-3"
                        data-category="${category.id}">
                    ${category.dishCateogryName}
                </button>
            `);
        });

        // Add event listeners to category tabs
        $categoryTabs.find('button').click(function() {
            $categoryTabs.find('button').removeClass('btn-primary').addClass('btn-outline-primary');
            $(this).removeClass('btn-outline-primary').addClass('btn-primary');

            currentCategory = $(this).data('category');
            renderMenuItems();
        });
    }

    // Render menu items based on selected category
    function renderMenuItems() {
        const $menuItemsGrid = $('#menuItemsGrid');
        $menuItemsGrid.empty();

        if (!allDishes || allDishes.length === 0) {
            $menuItemsGrid.html('<div class="col-12 text-center text-muted">Không có món ăn nào.</div>');
            return;
        }

        // Filter dishes by category if needed
        const filteredDishes = currentCategory === 'all'
            ? allDishes
            : allDishes.filter(dish => dish.dishCategoryId === currentCategory);

        // Render each dish
        filteredDishes.forEach(dish => {
            const imageUrl = dish.photo ? systemURL + dish.photo : 'https://via.placeholder.com/150?text=' + encodeURIComponent(dish.dishName);

            $menuItemsGrid.append(`
                <div class="col-6 col-md-4 col-lg-3">
                    <div class="card h-100 shadow-sm menu-item" data-dish-id="${dish.id}">
                        <div class="position-relative">
                            <img src="${imageUrl}" class="card-img-top" alt="${dish.dishName}" style="height: 120px; object-fit: contain;">
                            ${dish.isNew ? '<span class="position-absolute top-0 end-0 badge bg-info m-2">Mới</span>' : ''}
                            ${dish.isPopular ? '<span class="position-absolute top-0 end-0 badge bg-warning m-2">Phổ biến</span>' : ''}
                        </div>
                        <div class="card-body p-2">
                            <h6 class="card-title mb-1 text-truncate">${dish.dishName}</h6>
                            <p class="card-text text-primary fw-bold mb-2">${priceFormatCurrency(dish.price)}đ</p>
                            <button class="btn btn-sm btn-primary w-100 add-item-btn" data-dish-id="${dish.id}">
                                <i class="fas fa-plus me-1"></i> Thêm
                            </button>
                        </div>
                    </div>
                </div>
            `);
        });

        // If no dishes in the selected category
        if (filteredDishes.length === 0) {
            $menuItemsGrid.html('<div class="col-12 text-center text-muted">Không có món ăn nào trong danh mục này.</div>');
        }
    }

    // Setup event listeners
    function setupEventListeners() {
        // Search functionality
        $('#searchDish').on('input', function() {
            const searchTerm = $(this).val().toLowerCase();

            if (searchTerm.length > 0) {
                // Filter dishes by search term
                const filteredDishes = allDishes.filter(dish =>
                    dish.dishName.toLowerCase().includes(searchTerm) ||
                    dish.dishCode.toLowerCase().includes(searchTerm)
                );

                // Render filtered dishes
                renderFilteredMenuItems(filteredDishes);
            } else {
                // Reset to category view
                renderMenuItems();
            }
        });

        // Add item to cart
        $(document).on('click', '.add-item-btn', function() {
            const dishId = $(this).data('dish-id');
            addToCart(dishId);
        });

        // Quantity buttons
        $(document).on('click', '.quantity-btn', function() {
            const $cartItem = $(this).closest('.cart-item');
            const dishId = $cartItem.data('dish-id');
            const isPlus = $(this).hasClass('plus');

            updateCartItemQuantity(dishId, isPlus);
        });

        // Remove item from cart
        $(document).on('click', '.remove-item-btn', function() {
            const $cartItem = $(this).closest('.cart-item');
            const dishId = $cartItem.data('dish-id');

            removeFromCart(dishId);
        });

        // Add note button
        $(document).on('click', '.add-note-btn', function() {
            const $cartItem = $(this).closest('.cart-item');
            currentNoteItem = {
                dishId: $cartItem.data('dish-id'),
                element: $cartItem
            };

            // Clear previous note
            $('#noteText').val('');

            // Show note modal
            $('#noteModal').modal('show');
        });

        // Save note
        $('#saveNoteBtn').click(function() {
            const note = $('#noteText').val().trim();

            if (note && currentNoteItem) {
                // Replace add note button with note text
                currentNoteItem.element.find('.note-container').html(`
                    <div class="small text-muted mt-2">
                        <i class="fas fa-sticky-note me-1"></i> ${note}
                    </div>
                `);

                // Save note to the data structure
                saveNoteToItem(currentNoteItem.dishId, note);
            }

            // Close modal
            $('#noteModal').modal('hide');
        });

        // Discount buttons
        $('.discount-btn').click(function() {
            $('.discount-btn').removeClass('btn-warning').addClass('btn-outline-warning');
            $(this).removeClass('btn-outline-warning').addClass('btn-warning');

            const discount = $(this).data('discount');
            if (discount === 'custom') {
                // Handle custom discount
                $('#discountCode').focus();
            } else {
                currentDiscount = parseInt(discount);
                updateOrderSummary();
            }
        });

        // Apply discount button
        $('#applyDiscountBtn').click(function() {
            const discountCode = $('#discountCode').val().trim();

            if (discountCode) {
                // Here you would validate the discount code with your backend
                // For now, we'll just show an alert
                

                // Apply a custom discount (for demo purposes)
                currentDiscount = 12; // 12% discount for any code
                updateOrderSummary();

                // Update UI
                $('.discount-btn').removeClass('btn-warning').addClass('btn-outline-warning');
                $('.discount-btn[data-discount="custom"]').removeClass('btn-outline-warning').addClass('btn-warning');
            }
        });

        // Confirm order button
        $('#btnConfirmOrder').click(function() {
            // This will use your existing confirm order functionality
            // The button is just made visible when needed
        });

        // Action buttons
        $('#printTempBtn').click(function() {
            alert('In tạm tính');
        });

        $('#saveTempBtn').click(function() {
            alert('Lưu tạm');
        });

        $('#paymentBtn').click(async function() {
            await startInvoice(menuId);
            await makePayment();
        });
    }

    // Render filtered menu items (for search)
    function renderFilteredMenuItems(filteredDishes) {
        const $menuItemsGrid = $('#menuItemsGrid');
        $menuItemsGrid.empty();

        if (filteredDishes.length === 0) {
            $menuItemsGrid.html('<div class="col-12 text-center text-muted">Không tìm thấy món ăn nào.</div>');
            return;
        }

        // Render each dish
        filteredDishes.forEach(dish => {
            const imageUrl = dish.photo ? systemURL + dish.photo : 'https://via.placeholder.com/150?text=' + encodeURIComponent(dish.dishName);

            $menuItemsGrid.append(`
                <div class="col-6 col-md-4 col-lg-3">
                    <div class="card h-100 shadow-sm menu-item" data-dish-id="${dish.id}">
                        <div class="position-relative">
                            <img src="${imageUrl}" class="card-img-top" alt="${dish.dishName}" style="height: 120px; object-fit: cover;">
                        </div>
                        <div class="card-body p-2">
                            <h6 class="card-title mb-1 text-truncate">${dish.dishName}</h6>
                            <p class="card-text text-primary fw-bold mb-2">${priceFormatCurrency(dish.price)}đ</p>
                            <button class="btn btn-sm btn-primary w-100 add-item-btn" data-dish-id="${dish.id}">
                                <i class="fas fa-plus me-1"></i> Thêm
                            </button>
                        </div>
                    </div>
                </div>
            `);
        });
    }

    // Cart operations
    let cartItems = [];

    // Add item to cart
    function addToCart(dishId) {
        const dish = allDishes.find(d => d.id === dishId);
        if (!dish) return;

        // Check if item already exists in cart
        const existingItem = cartItems.find(item => item.dishId === dishId);

        if (existingItem) {
            // Increment quantity
            existingItem.quantity += 1;

            // Update UI
            const $cartItem = $(`.cart-item[data-dish-id="${dishId}"]`);
            $cartItem.find('.quantity-input').val(existingItem.quantity);
            updateOriginalTableQuantity(dishId, existingItem.quantity);
        } else {
            // Add new item
            cartItems.push({
                dishId: dish.id,
                dishName: dish.dishName,
                price: dish.price,
                quantity: 1,
                note: ''
            });
            addToOriginalTable(dish);

            // Add to UI
            $('#cart-items').append(`
                <div class="card mb-2 cart-item" data-dish-id="${dish.id}">
                    <div class="card-body p-2">
                        <div class="d-flex justify-content-between mb-2">
                            <h6 class="card-title mb-0">${dish.dishName}</h6>
                            <span class="text-primary fw-bold">${priceFormatCurrency(dish.price)}đ</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="input-group input-group-sm" style="width: 120px;">
                                <button class="btn btn-outline-secondary quantity-btn minus btn-quantity" type="button">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="text" class="form-control text-center quantity-input" value="1" readonly>
                                <button class="btn btn-outline-secondary quantity-btn plus btn-quantity" type="button">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                            <button class="btn btn-sm btn-outline-danger remove-item-btn">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                        <div class="note-container mt-2">
                            <button class="btn btn-sm btn-link p-0 add-note-btn">
                                <i class="fas fa-plus-circle me-1"></i> Thêm ghi chú
                            </button>
                        </div>
                    </div>
                </div>
            `);

            // Hide empty cart message
            $('#empty-cart').hide();
        }

        // Add to original table for compatibility
        

        // Update order summary
        updateOrderSummary();

        // Show confirm order button
        // $('#btnConfirmOrder').removeClass('d-none');
    }

    // Update cart item quantity
    function updateCartItemQuantity(dishId, isIncrease) {
        const cartItem = cartItems.find(item => item.dishId === dishId);
        if (!cartItem) return;

        if (isIncrease) {
            cartItem.quantity += 1;
        } else if (cartItem.quantity > 1) {
            cartItem.quantity -= 1;
        } else {
            return; // Don't decrease below 1
        }

        // Update UI
        const $cartItem = $(`.cart-item[data-dish-id="${dishId}"]`);
        $cartItem.find('.quantity-input').val(cartItem.quantity);

        // Update original table
        updateOriginalTableQuantity(dishId, cartItem.quantity);

        // Update order summary
        updateOrderSummary();
    }

    // Remove item from cart
    function removeFromCart(dishId) {
        // Remove from data
        cartItems = cartItems.filter(item => item.dishId !== dishId);

        // Remove from UI
        $(`.cart-item[data-dish-id="${dishId}"]`).fadeOut(300, function() {
            $(this).remove();

            // Show empty cart message if no items left
            if (cartItems.length === 0) {
                $('#empty-cart').show();
                $('#btnConfirmOrder').addClass('d-none');
            }
        });

        // Remove from original table
        removeFromOriginalTable(dishId);

        // Update order summary
        updateOrderSummary();
    }

    // Save note to cart item
    function saveNoteToItem(dishId, note) {
        const cartItem = cartItems.find(item => item.dishId === dishId);
        if (cartItem) {
            cartItem.note = note;
        }
        tableProduct.rows().every(function() {
            const data = this.data();
            if (data.dishId === dishId) {
                data.note = note;
                this.data(data).draw();
            }
        });
    }

    // Update order summary
    function updateOrderSummary() {
        let subtotal = 0;

        // Calculate subtotal
        cartItems.forEach(item => {
            subtotal += item.price * item.quantity;
        });

        // Calculate discount
        const discountAmount = subtotal * (currentDiscount / 100);


        // Calculate total
        const total = subtotal - discountAmount;

        // Update UI
        $('#subtotal').text(priceFormatCurrency(subtotal) + 'đ');
        $('#discount').text('-' + priceFormatCurrency(discountAmount) + 'đ');
 
        $('#total').text(priceFormatCurrency(total) + 'đ');
    }

    // Format currency
    function priceFormatCurrency(amount) {
        return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    // Functions to interact with the original table for compatibility
    function addToOriginalTable(dish) {
        // This integrates with your existing tableProduct DataTable
        tableProduct.row.add({
            "id": 0,
            "dishId": dish.id,
            "dishName": dish.dishName,
            "dishOrderStatusId": 1, // Use your constant here
            "price": dish.price,
            "finalPrice": dish.price,
            "quantity": 1,
            "isEdit": false,
        }).draw();
    }

    function updateOriginalTableQuantity(dishId, quantity) {

        // Find the row in the DataTable
        tableProduct.rows().every(function() {
            const data = this.data();
            if (data.dishId === dishId) {
                data.quantity = quantity;
                data.finalPrice = data.price * quantity;
                this.data(data).draw();

            }
        });
    }

    function removeFromOriginalTable(dishId) {
        // Find and remove the row from the DataTable
        tableProduct.rows().every(function() {
            const data = this.data();
            if (data.dishId === dishId) {
                tableProduct.row(this).remove().draw();

            }
        });
    }

    // Function to show order detail section
    function showOrderDetail(tableId) {
        // Update table info
        updateTableInfo(tableId);
        tableProduct.clear().draw();
        // Transition from history to detail view
        $('#tableOrderHistory').fadeOut(300, function() {
            $('#tableOrderDetail').removeClass('d-none');
            $('#tableOrderDetail').fadeIn(300);
        });

        // Show back button and confirm button
        $('#model-back-btn').removeClass('d-none');
        $('#btnConfirmOrder').removeClass('d-none');

        // Reset cart
        resetCart();
    }

    // Update table info
    async function updateTableInfo(tableId) {
        // You would fetch table info from your API here
        var tb = await getTableInfor(tableId);
        const match = tb.tableCode.match(/TB-\d{3}-(\d+)/);
        const maxPeople = match ? match[1] : 4;
        // For now, we'll use placeholder data
        $('#table-name').text(tb.tableName);
        $('#table-capacity').text(`${maxPeople}`);
        $('#order-number').text('1234');
        let staffNameOrder = JSON.parse(localStorage.getItem('profile')).fullName;
        $('#staff-name').text(staffNameOrder);
    }

    // Reset cart
    function resetCart() {
        cartItems = [];
        $('#cart-items').empty();
        $('#empty-cart').show();
        updateOrderSummary();
    }

    // Override your existing newOrder function
    function newOrder() {
        $("#dishOrder-id").val(0);
        tableProduct.clear().draw();            
        showOrderDetail($("#tableBooking-id").val());
    };

    // Override your existing editOrder function
    function editOrder(dishOrderId, dishOrderStatusId) {
        showOrderDetail($("#tableBooking-id").val());

        if (!(dishOrderStatusId == 1)) { // Replace 0 with your PROCESSING constant
            $('#btnConfirmOrder').addClass('d-none');
        }

        $("#dishOrder-id").val(dishOrderId);
        resetCart();

        // Load order details
        loadOrderDetails(dishOrderId);
    };

    // Load order details
    function loadOrderDetails(dishOrderId) {
        $.ajax({
            url: systemURL + "dishorderdetail/api/ListByOrderId/" + dishOrderId,
            method: "GET",
            success: function(response) {
                if (response.status === "200") {
                    response.data.forEach(item => {
                        // Add to original table
                        tableProduct.row.add({
                            "id": item.id,
                            "dishId": item.dishId,
                            "dishName": item.dishName,
                            "dishOrderStatusId": item.dishOrderStatusId,
                            "price": item.price,
                            "finalPrice": item.price * item.quantity,
                            "quantity": item.quantity,
                            "isEdit": false,
                        }).draw();

                        // Add to cart
                        const dish = {
                            id: item.dishId,
                            dishName: item.dishName,
                            price: item.price
                        };

                        // Add to cart data
                        cartItems.push({
                            dishId: item.dishId,
                            dishName: item.dishName,
                            price: item.price,
                            quantity: item.quantity,
                            note: item.description || ''
                        });

                        // Add to UI
                        $('#cart-items').append(`
                            <div class="card mb-2 cart-item" data-dish-id="${item.dishId}">
                                <div class="card-body p-2">
                                    <div class="d-flex justify-content-between mb-2">
                                        <h6 class="card-title mb-0">${item.dishName}</h6>
                                        <span class="text-primary fw-bold">${priceFormatCurrency(item.price)}đ</span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="input-group input-group-sm" style="width: 120px;">
                                            <button class="btn btn-outline-secondary quantity-btn minus" type="button">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="text" class="form-control text-center quantity-input" value="${item.quantity}" readonly>
                                            <button class="btn btn-outline-secondary quantity-btn plus" type="button">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                        <button class="btn btn-sm btn-outline-danger remove-item-btn">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                    <div class="note-container mt-2">
                                        ${item.description ?
                                            `<div class="small text-muted">
                                                <i class="fas fa-sticky-note me-1"></i> ${item.description}
                                            </div>` :
                                            `<button class="btn btn-sm btn-link p-0 add-note-btn">
                                                <i class="fas fa-plus-circle me-1"></i> Thêm ghi chú
                                            </button>`
                                        }
                                    </div>
                                </div>
                            </div>
                        `);
                    });

                    // Hide empty cart message
                    $('#empty-cart').hide();

                    // Update order summary
                    updateOrderSummary();
                } else {
                    console.error("Error loading order details:", response);
                    swal.fire({
                        icon: 'error',
                        title: 'Đặt món',
                        html: 'Đã xảy ra lỗi, vui lòng thử lại sau'
                    });
                }
            },
            error: function(xhr) {
                console.error("API call error:", xhr);
                swal.fire({
                    icon: 'error',
                    title: 'Đặt món',
                    html: 'Đã xảy ra lỗi, vui lòng thử lại sau'
                });
            }
        });
    }
</script>

<!-- #region Các hành động Table liên quan đến Order món, thêm món -->
<script>
    InitTableProduct();
    var tableProduct;
    function InitTableProduct() {
        tableProduct = $("#tableDataProduct").DataTable({
            order: [[0, 'desc']],
            ordering:false,
            columns: [
                {
                    data: "dishName",
                    render: function (data, type, row, meta) {
                        return "<span id='row" + row.id + "-column-id'>" + data + "<span>";
                    },
                },
                {
                    data: "price",
                    render: function (data, type, row, meta) {
                        return "<span id='row" + row.id + "-column-id'>" + formatNumberCurrency(data.toString()) + "<span>";
                    },
                },
                {
                    data: "quantity",
                    render: function (data, type, row, meta) {
                        return `
                                            <span class="">` + (data) + `</span>
                                            <input type="number" min="0" class="text-start form-control d-none quantity-change" onchange="onChangeQuantity(this)" value="` + data + `" />`;
                    },
                },
                {
                    data: "note",
                    render: function (data, type, row, meta) {
                        return "<span id='row" + row.id + "-column-id'>" + data + "<span>";
                    },
                },
                {
                    data: "finalPrice",
                    render: function (data, type, row, meta) {
                        return "<span class='bold' id='row" + row.id + "-column-id'>" + formatNumberCurrency(data.toString()) + "<span>";
                    },
                },
                {
                    data: 'id',
                    render: function (data, type, row, meta) {

                        return `
                                            <div class='overlay-edit-custom ${!(row.dishOrderStatusId == @DishOrderStatudConst.PROCESSING) ? "d-none" : ""}'>
                                            <button title="Sửa" type='button' onclick='editOrderDetail(this)' class='btn btn-icon btn-admin-primary ${row.isEdit == false ? '' : 'd-none'}'><i class="ki-duotone ki-notepad-edit fs-2x text-primary"><span class="path1"> </span><span class="path2"></span></i></button>
                                        <button title="Sửa hoàn tất" type='button' onclick='editDoneOrderDetail(this)' class='btn btn-icon btn-admin-primary ${row.isEdit == true ? '' : 'd-none'}'><i class="fas fa-check" style="color: #007BFF; font-size: 16px;"></i></button>
                                            <button title="Xoá" type='button' onclick='deleteOrderDetail(this)' class='btn btn-icon btn-admin-danger'><i class="ki-duotone ki-trash-square fs-2x text-danger"><span class="path1"></span><span class="path2"> </span><span class="path3"></span><span class="path4"> </span></i></button>
                                    </div>
                                `;
                    }
                },
            ],
            createdRow: function (row, data, dataIndex) {
                $(row).attr('data-productId', data.productId);
                $(row).attr('data-id', data.id);
            },
            columnDefs: [
                { targets: "no-sort", orderable: false },
                { targets: "no-search", searchable: false },
                { orderable: false, targets: [-1, 0] },
            ],
            aLengthMenu: [
                [10, 25, 50, 100],
                [10, 25, 50, 100]
            ],
            columnDefs: [
                {// Số lượng
                    targets: 2,
                    createdCell: function (td, cellData, rowData, row, col) {
                        $(td).attr("data-attr", "quantity");
                    }
                },
            ],
            drawCallback: function () {
                $('#tableDataProduct tfoot').html("");
                $("#tableDataProduct thead:nth-child(1) tr").clone(true).appendTo("#tableDataProduct tfoot");
                $('#tableDataProduct tfoot tr').addClass("border-top");
            },
            "oLanguage": {
                "sUrl": "/js/Vietnamese.json"
            },
        })
    }

    var DishData = [];
    function loadProductList() {
        $('#productSearchForOrder').select2({
            language: 'vi',
            dropdownCssClass: 'bigdrop',
            minimumInputLength: 1,
            ajax: {
                url: systemURL + 'Dish/api/Search',
                type: "POST",
                contentType: "application/json",
                data: function (params) {
                    return JSON.stringify({
                        searchString: params.term,
                    });
                },
                processResults: function (res) {
                    var data = res.data;
                    DishData = data
                    return {
                        results: data
                    };
                }
            },
            escapeMarkup: function (markup) { return markup; },
            templateResult: formatProductResult,
            templateSelection: formatProductSelection
        });
    }
    function formatProductResult(data) {
        var price = "";
        if (data.loading != true) {
            price = data.price.toString();
        }
        var price = data.price ? formatNumberCurrency(data.price.toString()) + ' vnđ' : 'N/A';
        var productName = data.dishName ? data.dishName : 'Không xác định';
        return `
                                    <div class="d-flex justify-content-between p-1">
                                            <span style="min-width: 120px; display: inline-block; padding-left: 0; color: #044688; ">
                                        <strong>${productName}</strong>
                                    </span>
                                </div>
                                <div class="p-1">
                                        <span style="min-width: 120px; display: inline-block; padding-left: 0; color: #044688; ;">
                                                ${price}
                                    </span>
                                </div>
                                    <div style="border-bottom: 1px solid #ced4da; margin-left: 0;"></div>
                        `;
    }
    function formatProductSelection(data) {
        return `<div class=""><span>` + data.name + `</span></div>`;
    }
    // Hàm sửa OrderDetail
    function editOrderDetail(element) {
        let $row = $(element).parents("tr")
        let data = tableProduct.row($row).data();

        data.isEdit = true;

        $.when(
            tableProduct.row($row).data(data).draw()
        ).done(function () {
            $row.find('td[data-attr="quantity"] span').addClass("d-none");
            $row.find('td[data-attr="quantity"] input').removeClass("d-none");
        });
    }
    function editDoneOrderDetail(element) {
        let $row = $(element).parents("tr")
        let data = tableProduct.row($row).data();

        data.isEdit = false;
        tableProduct.row($row).data(data).draw();
    }
    function calculateAllPrice() {
        let totalPrice = 0;
        tableProduct.rows().every(function (rowIdx, tableLoop, rowLoop) {
            totalPrice += this.data().finalPrice;
        });
        totalPrice += parseInt($("#order-TotalShipMoney").text().replaceAll('.', ''));
        $("#order-TotalMoney").text(formatNumberCurrency(totalPrice.toString()));
    };
    function getProductById(id) {
        const dish = DishData.find(d => parseInt(d.id) == parseInt(id));
        return dish;
    }
    function isExistProductInTable(dishId) {
        let isExist = false;
        tableProduct.rows().every(function () {
            if (this.data().dishId == dishId) isExist = true;
        });
        return isExist;
    }
    function deleteOrderDetail(element) {
        let $row = $(element).parents("tr")
        let data = tableProduct.row($row).data();
        tableProduct.row($row).remove().draw();
        // Xoá xong phải tính lại tiền tổng đơn
    }
    // Hàm thay đổi số lượng trong bảng need update
    function onChangeQuantity(element) {
        let $row = $(element).parents("tr")
        let data = tableProduct.row($row).data();
        let oldQuantity = parseInt(data.quantity);
        let newQuantity = $(element).val().replace(/\D/g, '') ? parseInt($(element).val().replace(/\D/g, '')) : oldQuantity;
        data.quantity = newQuantity;
        data.finalPrice = newQuantity * data.price;
    }
    submitButton.addEventListener('click', function (e) {
        e.preventDefault();
        let dishList = [];
        tableProduct.rows().every(function () {
            let data = this.data();

            let obj = {
                id: data.id,
                quantity: data.quantity,
                dishId: data.dishId,
                note: data.note,    
                dishOrderId: $("#dishOrder-id").val(),
            }
            dishList.push(obj);
        });
        if (dishList.length == 0) {
            Swal.fire(
                'Đặt món không thành công',
                'Vui lòng chọn ít nhất một món ăn!',
                'warning'
            );
            submitButton.setAttribute('data-kt-indicator', 'off');
            submitButton.disabled = false;
            return;
        }
        Swal.fire({
            title: 'Đặt món',
            text: "Xác nhận thay đổi?",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Xác nhận',
            cancelButtonText: 'Huỷ'
        }).then((result) => {
            if (result.value) { 
                submitButton.setAttribute('data-kt-indicator', 'on');
                submitButton.disabled = true;
                
                let UpdateObj = {
                    "id": $("#dishOrder-id").val(),
                    "tableId": $("#tableBooking-id").val(),
                    "accountId": 0,
                    "dishOrderStatusId": 0,
                    "dishOrderDetails": dishList
                }
                $.ajax({
                    url: systemURL + "dishorder/api/AddOrUpdate",
                    type: "POST",
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                    data: JSON.stringify(UpdateObj),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == "200" && responseData.message === "SUCCESS") {
                            Swal.fire(
                                'Thành công!',
                                'Đặt món thành công',
                                'success'
                            );
                            tableProduct.clear().draw();
                            submitButton.setAttribute('data-kt-indicator', 'off');
                            submitButton.disabled = false;
                            loadTableList();
                            startModel(UpdateObj.tableId)
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi, vui lòng thử lại',
                            'error'
                        );
                        submitButton.setAttribute('data-kt-indicator', 'off');
                        submitButton.disabled = false;
                    }
                });
            }
        });
        
        
    });
    function cancelOrder(id) {
        Swal.fire({
            title: 'Hủy đặt món',
            text: "Xác nhận thay đổi?",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Xác nhận',
            cancelButtonText: 'Huỷ'
        }).then((result) => {
            if (result.value) {
                let UpdateObj = {
                    "id": id,
                    "tableId": parseInt($("#tableBooking-id").val()),
                    "accountId": 0,
                    "dishOrderStatusId": @DishOrderStatudConst.CANCEL
                    }
                $.ajax({
                    url: systemURL + "dishorder/api/Update",
                    type: "POST",
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                    data: JSON.stringify(UpdateObj),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == "200" && responseData.message === "SUCCESS") {
                            Swal.fire(
                                'Thành công!',
                                'Hủy món thành công',
                                'success'
                            );
                            startModel(UpdateObj.tableId)
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi, vui lòng thử lại',
                            'error'
                        );

                    }
                });
            }
        })

                
    }

</script>
<!-- #region Các hành động Table liên quan đến Đặt bàn -->

<!-- #endregion -->
<!-- Các hành động liên quan đến thanh toán-->
<script>
    InitInvoiceTable();
    var tableInvoiceDetail;
    function InitInvoiceTable() {
        tableInvoiceDetail = $("#tableInvoiceDetail").DataTable({
            order: [[0, 'desc']],
            paging: false,
            info: false,
            ordering: false,
            columns: [
                {
                    data: "dishName",
                    render: function (data, type, row, meta) {
                        return `<strong class="ps-2"><span style=' color: #044688;' class='fs-14' >${data}</span></strong>`;
                    },
                },
                {
                    data: "price",
                    render: function (data, type, row, meta) {
                        return "<strong class='ps-2'><span style=' color: #044688;' class='fs-14' >" + formatNumberCurrency(data.toString()) + "đ<span></strong>";
                    },
                },
                {
                    data: "quantity",
                    render: function (data, type, row, meta) {
                        return `<strong class="ps-2"><span style=' color: #044688;' class='fs-14' >${data}</span></strong>`;
                    },
                },
                {
                    data: "totalPrice",
                    render: function (data, type, row, meta) {
                        return "<span class='bold ps-2' id='row" + row.id + "-column-id'>" + formatNumberCurrency(data.toString()) + "đ<span>";
                    },
                },
            ],
            "oLanguage": {
                "sUrl": "/js/Vietnamese.json"
            },
        })
    }
    submitButtonPayment.addEventListener('click', function (e) {
        e.preventDefault();
        let dishList = [];
        let tableList = [];
        tableInvoiceDetail.rows().every(function () {
            let data = this.data();
            let obj = {
                id: 0,
                dishId: data.dishId,
                quantity: data.quantity,
                unitPrice: data.price,
            }
            dishList.push(obj);
        });
        let  tojb = {
            tableId : $("#tableId").val(),
        }
        tableList.push(tojb);
        if (dishList.length == 0) {
            Swal.fire(
                'Tạo hóa đơn không thành công',  
                'warning'
            );
            submitButtonPayment.setAttribute('data-kt-indicator', 'off');
            submitButtonPayment.disabled = false;
            return;
        }
        Swal.fire({
            title: 'Tạo hóa đơn',
            text: "Xác nhận tạo?",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Xác nhận',
            cancelButtonText: 'Huỷ'
        }).then((result) => {
            if (result.value) {
                submitButtonPayment.setAttribute('data-kt-indicator', 'on');
                submitButtonPayment.disabled = true;

                // invoice update ajax
                let UpdateObj = {
                    "id": 0,
                    "accountId": $("#accoutId").val(),
                    "tableId": $("#tableId").val(),
                    "paymentMethod": $('#payment-paymentId').val(),
                    "totalMoney": $("#invoicedetail-totalPriceNotVAT").val().replace(/[.,]/g, ''),
                    "invoiceDetails": dishList,
                    "paymentStatus": 'Chờ thanh toán'
                }
                $.ajax({
                    url: systemURL + "invoice/api/AddOrUpdateVM",
                    type: "POST",
                    contentType: "application/json",
                    beforeSend: function (xhr) {
                        if (localStorage.token) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                        }
                    },
                    data: JSON.stringify(UpdateObj),
                    success:async function (responseData) {
                        // debugger;
                        if (responseData.status == "200" && responseData.message === "SUCCESS") {
                            let invoiceId = responseData.data[0].id;
                            let data = (await httpService.getAsync("invoice/api/InvoiceDetailVM?invoiceId=" + invoiceId)).data[0]
                            var detailHtml = '';

                            data.invoiceDetails.forEach((item) => { 
                                detailHtml += `<tr>
                                            <td>${item.dishName}</td>
                                            <td>${item.quantity}</td>
                                            <td>${item.unitPrice}</td>
                                            <td>${item.quantity * item.unitPrice}</td>
                                         </tr>`;
                            })
                                var qrImageUrl = `https://img.vietqr.io/image/VCB-103138853-compact.png?amount=${data.totalMoney}&addInfo=THANHTOAN${data.invoiceCode}`;

    var html = `
    <div class="container d-flex flex-column align-items-center">
        <div class="row">
          <div class="col-12 text-center">
            <h1>COFFEE HUYKHOI</h1>
            <p>Trịnh Văn Bô, Q.Nam Từ Liêm.</p>
            <p>0889987688</p>
            <h3><b>HÓA ĐƠN THANH TOÁN</b></h3>
            <p>Giờ thanh toán: ${moment(data.createdTime).format('HH:mm DD/MM/YYYY')}</p>
            <p>Mã hóa đơn: ${data.invoiceCode}</p>
            <p>Thu ngân: ${data.cashierName}</p>
          </div>
          <table class="table">
            <thead>
              <tr>
                <th>Món ăn</th>
                <th>SL</th>
                <th>Giá</th>
                <th>Tổng</th>
              </tr>
            </thead>
            <tbody>
                ${detailHtml}
            </tbody>
          </table>
          <div class="col-12 text-center">
            <p><b>Thanh toán: ${formatNumberCurrency(data.totalMoney)} VNĐ</b></p>
            <img src="${qrImageUrl}" width="180" height="180" alt="QR Code Thanh toán" />
            <p>Quét QR để thanh toán tự động</p>
          </div>
        </div>
    </div>`;

                            
                            loadDataSelectNoti();
                            loadTableList();
                            
                            $("#modal-payment").modal('hide')
                            submitButton.setAttribute('data-kt-indicator', 'off');
                            submitButton.disabled = false;
                            submitButtonPayment.setAttribute('data-kt-indicator', 'off');
                            submitButtonPayment.disabled = false;
                            startModel(UpdateObj.tableId)
                            Swal.fire({
            title: 'Thành công!',
            html: html,
            icon: 'success',
            confirmButtonText: 'Tôi đã thanh toán'
            }).then(async (result) => {
        if (result.isConfirmed) {
            // Cập nhật lại id cho UpdateObj
            UpdateObj.id = invoiceId;
            UpdateObj.paymentStatus = 'Đã thanh toán'; // cập nhật luôn trạng thái nếu cần

            // Gọi lại API AddOrUpdateVM
            await $.ajax({
                url: systemURL + "invoice/api/AddOrUpdateVM",
                type: "POST",
                contentType: "application/json",
                beforeSend: function (xhr) {
                    if (localStorage.token) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.token);
                    }
                },
                data: JSON.stringify(UpdateObj),
                success: function (responseData) {
                    if (responseData.status == "200" && responseData.message === "SUCCESS") {
                        Swal.fire('Đã xác nhận thanh toán và cập nhật hóa đơn!', '', 'success');
                    } else {
                        Swal.fire('Cập nhật thất bại!', '', 'error');
                    }
                },
                error: function (e) {
                    Swal.fire('Lỗi khi cập nhật hóa đơn!', '', 'error');
                }
            });
        }
    });


        $(".swal2-container .swal2-html-container").css("max-height", "500px");
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi, vui lòng thử lại',
                            'error'
                        );
                        submitButton.setAttribute('data-kt-indicator', 'off');
                        submitButton.disabled = false;
                    }
                });
            }
        });


    });
</script>

<script>
    
</script>                    