@{
    Layout = "_Admin_Layout";
}
@{
    ViewData["ViewName"] = "Món ăn";
}

    <style>
        :root {
            --primary-color: #4f46e5;
            --primary-light: #818cf8;
            --primary-dark: #3730a3;
            --secondary-color: #f8fafc;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
        }

      

        .page-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
            border-radius: 1rem;
            padding: 2rem;
            margin-bottom: 2rem;
            color: white;
            box-shadow: var(--shadow-lg);
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .page-subtitle {
            opacity: 0.9;
            margin-top: 0.5rem;
            font-size: 1.1rem;
        }

        .management-tabs {
            background: white;
            border-radius: 1rem;
            box-shadow: var(--shadow-md);
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .nav-tabs {
            border-bottom: none;
            background: var(--secondary-color);
            padding: 0.5rem;
        }

            .nav-tabs .nav-link {
                border: none;
                border-radius: 0.75rem;
                margin: 0 0.25rem;
                padding: 0.75rem 1.5rem;
                color: var(--text-secondary);
                font-weight: 600;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

                .nav-tabs .nav-link:hover {
                    background: white;
                    color: var(--primary-color);
                    transform: translateY(-2px);
                    box-shadow: var(--shadow-sm);
                }

                .nav-tabs .nav-link.active {
                    background: var(--primary-color);
                    color: white;
                    box-shadow: var(--shadow-md);
                }

        .tab-content {
            padding: 2rem;
        }

        .control-panel {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
        }

        .search-section {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-input {
            position: relative;
            flex: 1;
            min-width: 300px;
        }

            .search-input input {
                padding-left: 3rem;
                border-radius: 0.75rem;
                border: 2px solid var(--border-color);
                transition: all 0.3s ease;
            }

                .search-input input:focus {
                    border-color: var(--primary-color);
                    box-shadow: 0 0 0 3px rgb(79 70 229 / 0.1);
                }

            .search-input .search-icon {
                position: absolute;
                left: 1rem;
                top: 50%;
                transform: translateY(-50%);
                color: var(--text-secondary);
            }

        .action-buttons {
            display: flex;
            gap: 0.75rem;
        }

        .btn-modern {
            border-radius: 0.75rem;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            border: none;
        }

            .btn-modern:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow-md);
            }

        .btn-primary-modern {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
            color: white;
        }

        .btn-secondary-modern {
            background: white;
            color: var(--text-secondary);
            border: 2px solid var(--border-color);
        }

        .btn-success-modern {
            background: linear-gradient(135deg, var(--success-color) 0%, #34d399 100%);
            color: white;
        }

        .category-filter {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
        }

        .category-chips {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .category-chip {
            background: var(--secondary-color);
            border: 2px solid var(--border-color);
            border-radius: 2rem;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .category-chip:hover {
                background: var(--primary-color);
                color: white;
                border-color: var(--primary-color);
                transform: translateY(-2px);
            }

            .category-chip.active {
                background: var(--primary-color);
                color: white;
                border-color: var(--primary-color);
                box-shadow: var(--shadow-md);
            }

        .data-table-container {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
        }

        .table {
            margin: 0;
        }

            .table thead th {
                background: var(--secondary-color);
                border: none;
                padding: 1rem;
                font-weight: 600;
                color: var(--text-primary);
                white-space: nowrap;
            }

            .table tbody td {
                padding: 1rem;
                border-color: var(--border-color);
                vertical-align: middle;
            }

        .dish-image {
            width: 50px;
            height: 50px;
            border-radius: 0.75rem;
            object-fit: cover;
            box-shadow: var(--shadow-sm);
        }

        .dish-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .dish-details h6 {
            margin: 0;
            font-weight: 600;
            color: var(--text-primary);
        }

        .dish-code {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin: 0;
        }

        .price-badge {
            background: linear-gradient(135deg, var(--success-color) 0%, #34d399 100%);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-weight: 600;
            font-size: 0.875rem;
        }

        .category-badge {
            background: var(--accent-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-weight: 500;
            font-size: 0.875rem;
        }

        .action-buttons-table {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
        }

        .btn-action {
            width: 36px;
            height: 36px;
            border-radius: 0.5rem;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

            .btn-action:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow-md);
            }

        .btn-edit {
            background: var(--primary-color);
            color: white;
        }

        .btn-delete {
            background: var(--danger-color);
            color: white;
        }

        .btn-view {
            background: var(--accent-color);
            color: white;
        }

        .modal-content {
            border: none;
            border-radius: 1rem;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
            color: white;
            border-radius: 1rem 1rem 0 0;
            padding: 1.5rem;
        }

        .modal-title {
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .modal-body {
            padding: 2rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .form-control {
            border-radius: 0.75rem;
            border: 2px solid var(--border-color);
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }

            .form-control:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgb(79 70 229 / 0.1);
            }

        .image-upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

            .image-upload-area:hover {
                border-color: var(--primary-color);
                background: var(--secondary-color);
            }

        .image-preview {
            width: 200px;
            height: 200px;
            border-radius: 1rem;
            object-fit: cover;
            box-shadow: var(--shadow-md);
            margin: 1rem auto;
            display: block;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

            .stat-card:hover {
                transform: translateY(-4px);
                box-shadow: var(--shadow-lg);
            }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

        .stat-label {
            color: var(--text-secondary);
            font-weight: 500;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            backdrop-filter: blur(4px);
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid var(--border-color);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .main-container

        {
            padding: 1rem;
        }

        .page-header {
            padding: 1.5rem;
        }

        .search-section {
            flex-direction: column;
            align-items: stretch;
        }

        .search-input {
            min-width: auto;
        }

        .category-chips {
            justify-content: center;
        }

        .stats-cards {
            grid-template-columns: 1fr;
        }

        }
    </style>

<div id="kt_app_content" class="app-content  flex-column-fluid ">
    <!--begin::Content container-->
    <div id="kt_app_content_container" class="app-container  container-fluid ">


        <!-- Statistics Cards -->
        <div class="stats-cards fade-in">
            <div class="stat-card">
                <div class="stat-icon" style="background: linear-gradient(135deg, var(--primary-color), var(--primary-light)); color: white;">
                    <i class="fas fa-list"></i>
                </div>
                <h3 class="stat-number" id="totalCategories">0</h3>
                <p class="stat-label">Tổng nhóm món</p>
            </div>
            <div class="stat-card">
                <div class="stat-icon" style="background: linear-gradient(135deg, var(--success-color), #34d399); color: white;">
                    <i class="fas fa-utensils"></i>
                </div>
                <h3 class="stat-number" id="totalDishes">0</h3>
                <p class="stat-label">Tổng món ăn</p>
            </div>
            <div class="stat-card">
                <div class="stat-icon" style="background: linear-gradient(135deg, var(--accent-color), #22d3ee); color: white;">
                    <i class="fas fa-chart-line"></i>
                </div>
                <h3 class="stat-number" id="avgPrice">0</h3>
                <p class="stat-label">Giá trung bình</p>
            </div>
        </div>

        <!-- Management Tabs -->
        <div class="management-tabs fade-in">
            <ul class="nav nav-tabs" id="managementTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="dishes-tab" data-bs-toggle="tab" data-bs-target="#dishes" type="button" role="tab">
                        <i class="fas fa-utensils"></i>
                        Quản lý món ăn
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="categories-tab" data-bs-toggle="tab" data-bs-target="#categories" type="button" role="tab">
                        <i class="fas fa-list"></i>
                        Quản lý nhóm món
                    </button>
                </li>
            </ul>

            <div class="tab-content" id="managementTabsContent">
                <!-- Dishes Tab -->
                <div class="tab-pane fade show active" id="dishes" role="tabpanel">
                    <!-- Control Panel -->
                    <div class="control-panel">
                        <div class="search-section">
                            <div class="search-input">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="form-control" id="dishSearchInput" placeholder="Tìm kiếm món ăn...">
                            </div>
                            <div class="action-buttons">
                                <button class="btn btn-modern btn-secondary-modern" id="dishFilterBtn">
                                    <i class="fas fa-filter"></i>
                                    Bộ lọc
                                </button>
                                <button class="btn btn-modern btn-primary-modern" onclick="editDish(0)">
                                    <i class="fas fa-plus"></i>
                                    Thêm món mới
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Category Filter -->
                    <div class="category-filter">
                        <h6 class="mb-3"><i class="fas fa-tags me-2"></i>Lọc theo nhóm món</h6>
                        <div class="category-chips" id="categoryChips">
                            <div class="category-chip active" data-category-id="">
                                <i class="fas fa-th-large"></i>
                                Tất cả
                            </div>
                        </div>
                    </div>

                    <!-- Dishes Table -->
                    <div class="data-table-container">
                        <table id="dishesTable" class="table table-hover">
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>Món ăn</th>
                                    <th>Nhóm món</th>
                                    <th>Giá</th>
                                    <th>Ngày tạo</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>

                <!-- Categories Tab -->
                <div class="tab-pane fade" id="categories" role="tabpanel">
                    <!-- Control Panel -->
                    <div class="control-panel">
                        <div class="search-section">
                            <div class="search-input">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="form-control" id="categorySearchInput" placeholder="Tìm kiếm nhóm món...">
                            </div>
                            <div class="action-buttons">
                                <button class="btn btn-modern btn-secondary-modern" id="categoryFilterBtn">
                                    <i class="fas fa-filter"></i>
                                    Bộ lọc
                                </button>
                                <button class="btn btn-modern btn-primary-modern" onclick="editCategory(0)">
                                    <i class="fas fa-plus"></i>
                                    Thêm nhóm mới
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Categories Table -->
                    <div class="data-table-container">
                        <table id="categoriesTable" class="table table-hover">
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>Mã nhóm món</th>
                                    <th>Tên nhóm món</th>
                                    <th>Ngày tạo</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
    <!-- Dish Modal -->
    <div class="modal fade" id="dishModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-utensils"></i>
                        <span id="dishModalTitle">Thêm món ăn mới</span>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="dishForm">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-4">
                                    <label class="form-label">Ảnh món ăn</label>
                                    <div class="image-upload-area" onclick="document.getElementById('dishImageInput').click()">
                                        <img id="dishImagePreview" src="/images/default/NoImage.png" class="image-preview" alt="Preview">
                                        <p class="mt-3 mb-0"><i class="fas fa-cloud-upload-alt me-2"></i>Nhấp để chọn ảnh</p>
                                    </div>
                                    <input type="file" id="dishImageInput" accept="image/*" style="display: none;">
                                </div>
                            </div>
                            <div class="col-md-8">
                                <input type="hidden" id="dishId">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label required">Mã món</label>
                                        <input type="text" class="form-control" id="dishCode" readonly>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label required">Tên món</label>
                                        <input type="text" class="form-control" id="dishName">
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label required">Giá</label>
                                        <input type="number" class="form-control" id="dishPrice" min="0">
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label required">Nhóm món</label>
                                        <select class="form-select" id="dishCategoryId">
                                            <option value="">Chọn nhóm món</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-modern btn-secondary-modern" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i>
                        Hủy
                    </button>
                    <button type="button" class="btn btn-modern btn-success-modern" id="saveDishBtn">
                        <i class="fas fa-save"></i>
                        Lưu
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Modal -->
    <div class="modal fade" id="categoryModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-list"></i>
                        <span id="categoryModalTitle">Thêm nhóm món mới</span>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="categoryForm">
                        <input type="hidden" id="categoryId">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label required">Mã nhóm món</label>
                                <input type="text" class="form-control" id="categoryCode">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label required">Tên nhóm món</label>
                                <input type="text" class="form-control" id="categoryName">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-modern btn-secondary-modern" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i>
                        Hủy
                    </button>
                    <button type="button" class="btn btn-modern btn-success-modern" id="saveCategoryBtn">
                        <i class="fas fa-save"></i>
                        Lưu
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay" style="display: none;">
        <div class="loading-spinner"></div>
    </div>


    <script>
        let dishesTable, categoriesTable;
        let selectedCategoryId = '';
        let dishCategories = [];

        // Initialize the application
        $(document).ready(function() {
            initializeApp();
        });

        function initializeApp() {
            loadCategories();
            initializeTables();
            bindEvents();
            loadStatistics();
        }

        function showLoading() {
            $('#loadingOverlay').show();
        }

        function hideLoading() {
            $('#loadingOverlay').hide();
        }

        // Load categories for filters and dropdowns
        async function loadCategories() {
            try {
                const response = await $.ajax({
                    url: systemURL + 'dishcategory/api/list',
                    type: 'GET',
                    contentType: 'application/json'
                });

                if (response.status == 200) {
                    dishCategories = response.data;
                    populateCategoryChips();
                    populateCategoryDropdown();
                }
            } catch (error) {
                console.error('Error loading categories:', error);
                Swal.fire('Lỗi', 'Không thể tải danh sách nhóm món', 'error');
            }
        }

        function populateCategoryChips() {
            const container = $('#categoryChips');

            // Xoá tất cả chip trừ "Tất cả" (có data-category-id="")
            container.find('[data-category-id]:not([data-category-id=""])').remove();

            // Thêm lại các chip
            dishCategories.forEach(category => {
                const chip = $(`
                    <div class="category-chip" data-category-id="${category.id}">
                        <i class="fas fa-tag"></i>
                        ${category.dishCateogryName}
                    </div>
                `);
                container.append(chip);
            });
        }


        function populateCategoryDropdown() {
            const dropdown = $('#dishCategoryId');
            dropdown.empty().append('<option value="">Chọn nhóm món</option>');

            dishCategories.forEach(category => {
                dropdown.append(`<option value="${category.id}">${category.dishCateogryName}</option>`);
            });
        }

        // Initialize DataTables
        function initializeTables() {
            // Dishes Table
            dishesTable = $('#dishesTable').DataTable({
                processing: true,
                serverSide: true,
                paging: true,
                searching: { regex: true },
                order: [[1, 'desc']],
                language: {
                    url: '/js/Vietnamese.json'
                },
                ajax: {
                    url: systemURL + "dish/api/list-server-side",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function(d) {
                        d.searchAll = $("#dishSearchInput").val();
                        if (selectedCategoryId) {
                            d.dishCategoryId = selectedCategoryId;
                        }
                        return JSON.stringify(d);
                    }
                },
                columns: [
                    {
                        data: 'id',
                        render: function(data, type, row, meta) {
                            const info = dishesTable.page.info();
                            return meta.row + 1 + info.page * info.length;
                        }
                    },
                    {
                        data: 'dishName',
                        render: function(data, type, row) {
                            const imageUrl = row.photo ? `${systemURL}${row.photo}` : '/images/default/NoImage.png';
                            return `
                                <div class="dish-info">
                                    <img src="${imageUrl}" alt="${data}" class="dish-image">
                                    <div class="dish-details">
                                        <h6>${data}</h6>
                                        <p class="dish-code">${row.dishCode}</p>
                                    </div>
                                </div>
                            `;
                        }
                    },
                    {
                        data: 'dishCateogryName',
                        render: function(data) {
                            return `<span class="category-badge">${data}</span>`;
                        }
                    },
                    {
                        data: 'price',
                        render: function(data) {
                            return `<span class="price-badge">${parseInt(data).toLocaleString('vi-VN')} ₫</span>`;
                        }
                    },
                    {
                        data: 'createdTime',
                        render: function(data) {
                            return moment(data).format('DD/MM/YYYY HH:mm');
                        }
                    },
                    {
                        data: 'id',
                        render: function(data, type, row) {
                            return `
                                <div class="action-buttons-table">
                                    <button class="btn-action btn-edit" onclick="editDish(${data})" title="Sửa">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn-action btn-delete" onclick="deleteDish(${data})" title="Xóa">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                columnDefs: [
                    { orderable: false, targets: [-1, 0] }
                ],
                pageLength: 10,
                lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]]
            });

            // Categories Table
            categoriesTable = $('#categoriesTable').DataTable({
                processing: true,
                serverSide: true,
                paging: true,
                searching: { regex: true },
                order: [[1, 'desc']],
                language: {
                    url: '/js/Vietnamese.json'
                },
                ajax: {
                    url: systemURL + "dishCategory/api/list-server-side",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function(d) {
                        d.searchAll = $("#categorySearchInput").val();
                        return JSON.stringify(d);
                    }
                },
                columns: [
                    {
                        data: 'id',
                        render: function(data, type, row, meta) {
                            const info = categoriesTable.page.info();
                            return meta.row + 1 + info.page * info.length;
                        }
                    },
                    {
                        data: 'dishCategoryCode',
                        render: function(data) {
                            return `<span style="font-weight: bold; color: var(--primary-color);">${data}</span>`;
                        }
                    },
                    {
                        data: 'dishCateogryName'
                    },
                    {
                        data: 'createdTime',
                        render: function(data) {
                            return moment(data).format('DD/MM/YYYY HH:mm');
                        }
                    },
                    {
                        data: 'id',
                        render: function(data, type, row) {
                            return `
                                <div class="action-buttons-table">
                                    <button class="btn-action btn-edit" onclick="editCategory(${data})" title="Sửa">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn-action btn-delete" onclick="deleteCategory(${data})" title="Xóa">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                    <button class="btn-action btn-view" onclick="viewCategoryDishes(${data})" title="Xem món ăn">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                columnDefs: [
                    { orderable: false, targets: [-1, 0] }
                ],
                pageLength: 10,
                lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]]
            });
        }

        // Bind events
        function bindEvents() {
            // Search inputs
            $('#dishSearchInput').on('input', function() {
                dishesTable.search($(this).val()).draw();
            });

            $('#categorySearchInput').on('input', function() {
                categoriesTable.search($(this).val()).draw();
            });

            // Category filter chips
            $(document).on('click', '.category-chip', function() {
                $('.category-chip').removeClass('active');
                $(this).addClass('active');
                selectedCategoryId = $(this).data('category-id');
                dishesTable.ajax.reload();
            });

            // Image upload
            $('#dishImageInput').on('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        $('#dishImagePreview').attr('src', e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Auto-generate dish code
            $('#dishName').on('input', function() {
                const dishName = $(this).val();
                const dishCode = generateDishCode(dishName);
                $('#dishCode').val(dishCode);
            });

            // Save buttons
            $('#saveDishBtn').on('click', saveDish);
            $('#saveCategoryBtn').on('click', saveCategory);

            // Tab change event
            $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function(e) {
                if (e.target.id == 'categories-tab') {
                    categoriesTable.columns.adjust().draw();
                } else {
                    dishesTable.columns.adjust().draw();
                }
            });
        }

        // Load statistics
        async function loadStatistics() {
            try {

				const dishStatistics = await $.ajax({
                    url: systemURL + 'dish/api/getDishStatistics',
					type: 'GET'
				});

                if(dishStatistics.status == 200) {
					var dataStatics = dishStatistics.data[0];
                    $('#totalCategories').text(dataStatics.totalDishCate);
                    $('#avgPrice').text(parseInt(dataStatics.avgDishPrice).toLocaleString('vi-VN') + ' ₫');
                    $('#totalDishes').text(dataStatics.totalDish);
                }

            } catch (error) {
                console.error('Error loading statistics:', error);
            }
        }

        // Dish management functions
        async function editDish(id) {
            $('#dishModal').modal('show');
        console.log(id);
            if (id > 0) {
                $('#dishModalTitle').text('Cập nhật món ăn');
                try {
                    const response = await $.ajax({
                        url: systemURL + `dish/api/detail/${id}`,
                        type: 'GET'
                    });

                    if (response.status == 200) {
                        const dish = response.data[0];
                        $('#dishId').val(dish.id);
                        $('#dishCode').val(dish.dishCode);
                        $('#dishName').val(dish.dishName);
                        $('#dishPrice').val(dish.price);
                        $('#dishCategoryId').val(dish.dishCategoryId);

                        if (dish.photo) {
                            $('#dishImagePreview').attr('src', `${systemURL}${dish.photo}`);
                        }
                    }
                } catch (error) {
                    Swal.fire('Lỗi', 'Không thể tải thông tin món ăn', 'error');
                }
            } else {
                $('#dishModalTitle').text('Thêm món ăn mới');
                $('#dishForm')[0].reset();
                $('#dishId').val('0');
                $('#dishImagePreview').attr('src', '/images/default/NoImage.png');
            }
        }

        async function saveDish() {
            if (!validateDishForm()) return;

            const formData = new FormData();
            const dishId = $('#dishId').val();

            formData.append('id', dishId);
            formData.append('dishCode', $('#dishCode').val());
            formData.append('dishName', $('#dishName').val());
            formData.append('price', $('#dishPrice').val());
            formData.append('dishCategoryId', $('#dishCategoryId').val());
            formData.append('active', true);
            formData.append('createdTime', new Date().toISOString());

            const imageFile = $('#dishImageInput')[0].files[0];
            if (imageFile) {
                formData.append('Image', imageFile);
            }

            const actionText = dishId == '0' ? 'thêm mới' : 'cập nhật';

            try {
                const result = await Swal.fire({
                    title: 'Xác nhận',
                    text: `Bạn có muốn ${actionText} món ăn này?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Xác nhận',
                    cancelButtonText: 'Hủy'
                });

                if (result.isConfirmed) {
                    showLoading();

                    const response = await $.ajax({
                        url: systemURL + 'dish/api/addOrUpdate',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false
                    });

                    if (response.status == 200) {
                    hideLoading();
                        await Swal.fire('Thành công', `Đã ${actionText} món ăn thành công`, 'success');
                        $('#dishModal').modal('hide');
                        dishesTable.ajax.reload();
                        loadStatistics();
                    }
                }
            } catch (error) {
                Swal.fire('Lỗi', 'Có lỗi xảy ra khi lưu món ăn', 'error');
            } finally {
                hideLoading();
            }
        }

        async function deleteDish(id) {
            try {
                const result = await Swal.fire({
                    title: 'Xác nhận xóa',
                    text: 'Bạn có chắc chắn muốn xóa món ăn này?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Xóa',
                    cancelButtonText: 'Hủy',
                    confirmButtonColor: '#ef4444'
                });

                if (result.isConfirmed) {
                    showLoading();
                var obj = await getDishById(id);
                
                    const response = await $.ajax({
                        url: systemURL + 'dish/api/delete',
                        type: 'POST',
                        contentType: 'application/json',
                    data: JSON.stringify(obj)
                    });

                    if (response.status == 200) {
                    hideLoading();
                        await Swal.fire('Thành công', 'Đã xóa món ăn thành công', 'success');
                        dishesTable.ajax.reload();
                        loadStatistics();
                    }
                }
            } catch (error) {
                Swal.fire('Lỗi', 'Có lỗi xảy ra khi xóa món ăn', 'error');
            } finally {
                hideLoading();
            }
        }

        // Category management functions
        async function editCategory(id) {
            $('#categoryModal').modal('show');

            if (id > 0) {
                $('#categoryModalTitle').text('Cập nhật nhóm món');
                try {
                    const response = await $.ajax({
                        url: systemURL + `dishCategory/api/detail/${id}`,
                        type: 'GET'
                    });

                    if (response.status == 200) {
                    hideLoading();
                        const category = response.data[0];
                        $('#categoryId').val(category.id);
                        $('#categoryCode').val(category.dishCategoryCode);
                        $('#categoryName').val(category.dishCateogryName);
                    }
                } catch (error) {
                    Swal.fire('Lỗi', 'Không thể tải thông tin nhóm món', 'error');
                }
            } else {
                $('#categoryModalTitle').text('Thêm nhóm món mới');
                $('#categoryForm')[0].reset();
                $('#categoryId').val('0');
                generateNewCategoryCode();
            }
        }

        async function saveCategory() {
            if (!validateCategoryForm()) return;

            const categoryId = $('#categoryId').val();
            const categoryData = {
                id: categoryId,
                dishCategoryCode: $('#categoryCode').val(),
                dishCateogryName: $('#categoryName').val(),
                active: true,
                createdTime: new Date().toISOString()
            };

            const actionText = categoryId == '0' ? 'thêm mới' : 'cập nhật';
            const apiUrl = categoryId == '0' ? 'dishCategory/api/add' : 'dishCategory/api/update';

            try {
                const result = await Swal.fire({
                    title: 'Xác nhận',
                    text: `Bạn có muốn ${actionText} nhóm món này?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Xác nhận',
                    cancelButtonText: 'Hủy'
                });

                if (result.isConfirmed) {
                    showLoading();

                    if (categoryId == '0') {
                        delete categoryData.id;
                    }

                    const response = await $.ajax({
                        url: systemURL + apiUrl,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(categoryData)
                    });

                    if ((response.status == 200 && categoryId !== '0') || (response.status == 201 && categoryId == '0')) {
                    hideLoading();
                        await Swal.fire('Thành công', `Đã ${actionText} nhóm món thành công`, 'success');
                        $('#categoryModal').modal('hide');
                        categoriesTable.ajax.reload();
                        loadCategories(); // Reload categories for filters
                        loadStatistics();
                    }
                }
            } catch (error) {
                Swal.fire('Lỗi', 'Có lỗi xảy ra khi lưu nhóm món', 'error');
            } finally {
                hideLoading();
            }
        }

        async function deleteCategory(id) {
            try {
                const result = await Swal.fire({
                    title: 'Xác nhận xóa',
                    text: 'Bạn có chắc chắn muốn xóa nhóm món này?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Xóa',
                    cancelButtonText: 'Hủy',
                    confirmButtonColor: '#ef4444'
                });

                if (result.isConfirmed) {
                    showLoading();
                    var item = await getDishCateById(id);
                    const response = await $.ajax({
                        url: systemURL + 'dishCategory/api/delete',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(item)
                    });

                    if (response.status == 200) {
                    hideLoading();
                        await Swal.fire('Thành công', 'Đã xóa nhóm món thành công', 'success');
                        categoriesTable.ajax.reload();
                        loadCategories(); // Reload categories for filters
                        loadStatistics();
                    }
                }
            } catch (error) {
                Swal.fire('Lỗi', 'Có lỗi xảy ra khi xóa nhóm món', 'error');
            } finally {
                hideLoading();
            }
        }

        function viewCategoryDishes(categoryId) {
            // Switch to dishes tab and filter by category
            $('#dishes-tab').tab('show');
            selectedCategoryId = categoryId;
            $('.category-chip').removeClass('active');
            $(`.category-chip[data-category-id="${categoryId}"]`).addClass('active');
            dishesTable.ajax.reload();
        }

        // Utility functions
        function generateDishCode(str) {
            return str
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .replace(/[^a-zA-Z0-9]/g, "")
                .toLowerCase();
        }

        function generateNewCategoryCode() {
            let highestCodeNumber = 0;

            // Get existing codes from the table
            categoriesTable.data().each(function(row) {
                const code = row.dishCategoryCode;
                if (code.startsWith("NM")) {
                    const codeNumber = parseInt(code.substring(2), 10);
                    highestCodeNumber = Math.max(highestCodeNumber, codeNumber);
                }
            });

            $('#categoryCode').val("NM" + (highestCodeNumber + 1).toString().padStart(6, "0"));
        }

        function validateDishForm() {
            const errors = [];

            if (!$('#dishCode').val().trim()) {
                errors.push('Mã món không được để trống');
            }

            if (!$('#dishName').val().trim()) {
                errors.push('Tên món không được để trống');
            }

            if (!$('#dishPrice').val() || $('#dishPrice').val() <= 0) {
                errors.push('Giá món phải lớn hơn 0');
            }

            if (!$('#dishCategoryId').val()) {
                errors.push('Vui lòng chọn nhóm món');
            }

            if (errors.length > 0) {
                Swal.fire('Lỗi nhập liệu', errors.join('<br>'), 'warning');
                return false;
            }

            return true;
        }

        function validateCategoryForm() {
            const errors = [];

            if (!$('#categoryCode').val().trim()) {
                errors.push('Mã nhóm món không được để trống');
            }

            if (!$('#categoryName').val().trim()) {
                errors.push('Tên nhóm món không được để trống');
            }

            if (errors.length > 0) {
                Swal.fire('Lỗi nhập liệu', errors.join('<br>'), 'warning');
                return false;
            }

            return true;
        }

        // Format datetime for API
        function formatDatetimeUpdate(dateString) {
            return moment(dateString, "DD/MM/YYYY HH:mm:ss").format("YYYY-MM-DD HH:mm:ss");
        }

        // Format number inputs
        function formatNumber() {
            // Add any number formatting logic here
        }

        function validateInputNumber() {
            // Add any number validation logic here
        }

        async function getDishById(id) {
            var data;
            await $.ajax({
                url: systemURL + "dish/api/detail/" + id,
                method: "GET",
                success: function (responseData) {
                    data = responseData.data[0];
                },
                error: function (e) {
                },
            });
            return data;
        }

     async function getDishCateById(id) {
        var data;
        await $.ajax({
            url: systemURL + "dishCategory/api/detail/" + id,
            method: "GET",
            success: function (responseData) {
                data = responseData.data[0];
            },
            error: function (e) {
            },
        });
        return data;
    }
    </script>

